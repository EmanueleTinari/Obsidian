/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RevelFolded
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// node_modules/.pnpm/monkey-around@3.0.0/node_modules/monkey-around/dist/index.mjs
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const inherited = obj[method], hadOwn = obj.hasOwnProperty(method), original = hadOwn ? inherited : function() {
    return Object.getPrototypeOf(obj)[method].apply(this, arguments);
  };
  let current = createWrapper(original);
  if (inherited)
    Object.setPrototypeOf(current, inherited);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, inherited || Function);
  }
}

// obsidian-reusables/src/PluginWithSettings.ts
var import_obsidian = require("obsidian");
function PluginWithSettings(DEFAULT_SETTINGS2) {
  return class PluginWithSettings extends import_obsidian.Plugin {
    constructor() {
      super(...arguments);
      this.settings = DEFAULT_SETTINGS2;
      this.uninstallers = [];
    }
    async loadSettings() {
      Object.assign(this.settings, await this.loadData());
    }
    async initSettings(SettingsTab) {
      await this.loadSettings();
      this.addSettingTab(new SettingsTab(this.app, this));
    }
    async saveSettings() {
      await this.saveData(this.settings);
    }
    registerPatch(obj, factories) {
      const uninstaller = around(
        obj,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        Object.fromEntries(
          Object.entries(
            factories
          ).map(([key, f]) => {
            return [
              key,
              (next) => f(next, this)
            ];
          })
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
        )
      );
      this.uninstallers.push(uninstaller);
      return uninstaller;
    }
    uninstallPatches() {
      this.uninstallers.forEach((v) => {
        v();
      });
    }
    unload() {
      this.uninstallPatches();
    }
    getCheckCallbackWithValue(valueGetter, cb) {
      return (checking) => {
        const value = valueGetter();
        if (value && !checking)
          cb.apply(this, [value]);
        return !!value;
      };
    }
  };
}

// src/settings.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  autoReveal: false
};
var MainPluginSettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const options = Object.fromEntries(
      this.app.vault.getAllFolders().map((v) => [v.path, v.path])
    );
    options["/"] = "/";
    const setAutoReveal = async (v) => {
      this.plugin.settings.autoReveal = v;
      await this.plugin.saveSettings();
    };
    new import_obsidian2.Setting(containerEl).setName("Auto reveal").setDesc(
      "Automatically reveal your current file (is disabled on mobile)"
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.autoReveal).onChange(setAutoReveal);
    });
  }
};

// src/main.ts
var RevelFolded = class extends PluginWithSettings(DEFAULT_SETTINGS) {
  async onload() {
    await this.initSettings(MainPluginSettingsTab);
    this.addCommand({
      id: "reveal-active-file-folded",
      name: "Reveal active file in folded file explorer",
      icon: "folder-search",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (!checking && activeFile)
          this.doCommand(activeFile);
        return !!activeFile;
      }
    });
    if (import_obsidian3.Platform.isDesktop)
      this.app.workspace.on("file-open", (file) => {
        const hasActiveFile = this.app.workspace.getActiveFile();
        if (hasActiveFile && file && this.settings.autoReveal)
          this.doCommand(file);
      });
  }
  doCommand(file) {
    for (const leave of this.app.workspace.getLeavesOfType(
      "file-explorer"
    )) {
      if (!("tree" in leave.view))
        continue;
      leave.view.tree.setCollapseAll(true);
    }
    setTimeout(() => {
      for (const leave of this.app.workspace.getLeavesOfType(
        "file-explorer"
      )) {
        if (!("tree" in leave.view))
          continue;
        leave.view.tree.isAllCollapsed = false;
      }
    }, 0);
    setTimeout(() => {
      this.app.commands.executeCommandById(
        "file-explorer:reveal-active-file"
      );
      setTimeout(() => {
        void this.app.workspace.getLeaf().openFile(file);
      }, 50);
    }, 100);
  }
};

/* nosourcemap */