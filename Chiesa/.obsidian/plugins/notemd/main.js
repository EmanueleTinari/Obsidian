/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var pe=Object.defineProperty;var Oe=Object.getOwnPropertyDescriptor;var _e=Object.getOwnPropertyNames;var ze=Object.prototype.hasOwnProperty;var Ue=(o,i)=>{for(var e in i)pe(o,e,{get:i[e],enumerable:!0})},Ge=(o,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let n of _e(i))!ze.call(o,n)&&n!==e&&pe(o,n,{get:()=>i[n],enumerable:!(t=Oe(i,n))||t.enumerable});return o};var Ve=o=>Ge(pe({},"__esModule",{value:!0}),o);var rt={};Ue(rt,{default:()=>he});module.exports=Ve(rt);var v=require("obsidian");var P={providers:[{name:"DeepSeek",apiKey:"",baseUrl:"https://api.deepseek.com/v1",model:"deepseek-reasoner",temperature:.5},{name:"OpenAI",apiKey:"",baseUrl:"https://api.openai.com/v1",model:"gpt-4o",temperature:.5},{name:"Anthropic",apiKey:"",baseUrl:"https://api.anthropic.com",model:"claude-3-5-sonnet-20240620",temperature:.5},{name:"Google",apiKey:"",baseUrl:"https://generativelanguage.googleapis.com/v1",model:"gemini-2.0-flash-exp",temperature:.5},{name:"Mistral",apiKey:"",baseUrl:"https://api.mistral.ai/v1",model:"mistral-large-latest",temperature:.5},{name:"Azure OpenAI",apiKey:"",baseUrl:"",model:"gpt-4o",temperature:.5,apiVersion:"2025-01-01-preview"},{name:"LMStudio",apiKey:"EMPTY",baseUrl:"http://localhost:1234/v1",model:"local-model",temperature:.7},{name:"Ollama",apiKey:"",baseUrl:"http://localhost:11434/api",model:"llama3",temperature:.7},{name:"OpenRouter",apiKey:"",baseUrl:"https://openrouter.ai/api/v1",model:"gryphe/mythomax-l2-13b",temperature:.7},{name:"xAI",apiKey:"",baseUrl:"https://api.x.ai/v1",model:"grok-1.5-flash",temperature:.7}],activeProvider:"DeepSeek",useCustomConceptNoteFolder:!1,conceptNoteFolder:"",useCustomProcessedFileFolder:!1,processedFileFolder:"",generateConceptLogFile:!1,useCustomConceptLogFolder:!1,conceptLogFolderPath:"",useCustomConceptLogFileName:!1,conceptLogFileName:"Generate.log",chunkWordCount:3e3,maxTokens:8192,enableDuplicateDetection:!0,processMode:"single",moveOriginalFileOnProcess:!1,tavilyApiKey:"",searchProvider:"tavily",ddgMaxResults:5,ddgFetchTimeout:15,maxResearchContentTokens:3e3,enableResearchInGenerateContent:!1,tavilyMaxResults:5,tavilySearchDepth:"basic",useMultiModelSettings:!1,addLinksProvider:"DeepSeek",researchProvider:"DeepSeek",generateTitleProvider:"DeepSeek",translateProvider:"DeepSeek",enableStableApiCall:!1,apiCallInterval:5,apiCallMaxRetries:3,addLinksModel:"",researchModel:"",generateTitleModel:"",translateModel:"",summarizeToMermaidModel:"",useCustomAddLinksSuffix:!1,addLinksCustomSuffix:"",useCustomTranslationSuffix:!1,translationCustomSuffix:"_translated",useCustomTranslationSavePath:!1,translationSavePath:"",useCustomGenerateTitleOutputFolder:!1,generateTitleOutputFolderName:"_complete",duplicateCheckScopeMode:"vault",duplicateCheckScopePaths:"",removeCodeFencesOnAddLinks:!1,language:"en",availableLanguages:[{code:"en",name:"English"},{code:"es",name:"Espa\xF1ol"},{code:"fr",name:"Fran\xE7ais"},{code:"de",name:"Deutsch"},{code:"it",name:"Italiano"},{code:"pt",name:"Portugu\xEAs"},{code:"zh-CN",name:"\u7B80\u4F53\u4E2D\u6587"},{code:"zh-TW",name:"\u7E41\u9AD4\u4E2D\u6587"},{code:"ja",name:"\u65E5\u672C\u8A9E"},{code:"ko",name:"\uD55C\uAD6D\uC5B4"},{code:"ru",name:"\u0420\u0443\u0441\u0441\u043A\u0438\u0439"},{code:"ar",name:"\u0627\u0644\u0639\u0631\u0628\u064A\u0629"},{code:"hi",name:"\u0939\u093F\u0928\u094D\u0926\u0940"},{code:"bn",name:"\u09AC\u09BE\u0982\u09B2\u09BE"},{code:"nl",name:"Nederlands"},{code:"sv",name:"Svenska"},{code:"fi",name:"Suomi"},{code:"da",name:"Dansk"},{code:"no",name:"Norsk"},{code:"pl",name:"Polski"},{code:"tr",name:"T\xFCrk\xE7e"},{code:"he",name:"\u05E2\u05D1\u05E8\u05D9\u05EA"},{code:"th",name:"\u0E44\u0E17\u0E22"},{code:"el",name:"\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC"},{code:"cs",name:"\u010Ce\u0161tina"},{code:"hu",name:"Magyar"},{code:"ro",name:"Rom\xE2n\u0103"},{code:"uk",name:"\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430"},{code:"vi",name:"Ti\u1EBFng Vi\u1EC7t"},{code:"id",name:"Bahasa Indonesia"},{code:"ms",name:"Bahasa Melayu"}],useDifferentLanguagesForTasks:!1,generateTitleLanguage:"en",researchSummarizeLanguage:"en",addLinksLanguage:"en",summarizeToMermaidLanguage:"en",enableGlobalCustomPrompts:!1,useCustomPromptForAddLinks:!1,customPromptAddLinks:"",useCustomPromptForGenerateTitle:!1,customPromptGenerateTitle:"",useCustomPromptForResearchSummarize:!1,customPromptResearchSummarize:"",summarizeToMermaidProvider:"DeepSeek",useCustomPromptForSummarizeToMermaid:!1,customPromptSummarizeToMermaid:"",translateSummarizeToMermaidOutput:!1,useCustomSummarizeToMermaidSuffix:!1,summarizeToMermaidCustomSuffix:"_summ",useCustomSummarizeToMermaidSavePath:!1,summarizeToMermaidSavePath:"",enableFocusedLearning:!1,focusedLearningDomain:""},O="notemd-sidebar-view",ie="Notemd Processor",oe="wand";var fe=require("obsidian"),Z=o=>new Promise(i=>setTimeout(i,o));function re(o,i){let e=i.chunkWordCount,t=o.split(/(\n\s*\n)/),n=[],s=[],a=0,r=d=>d.trim().split(/\s+/).filter(Boolean).length;for(let d=0;d<t.length;d++){let l=t[d],m=r(l);a+m>e&&s.length>0?(n.push(s.join("").trim()),s=l.trim()===""?[]:[l],a=l.trim()===""?0:m):(s.push(l),a+=m)}if(s.length>0){let d=s.join("").trim();d&&n.push(d)}return n}function Ce(o){let i=o;return i=i.replace(/[-_]/g," "),i=i.replace(/[\\/:*?"<>|#^[\]]/g,""),i=i.replace(/\s+/g," ").trim(),i}function Ee(o){return o?Math.ceil(o.length/4):0}function L(o,i){return new Promise((e,t)=>{let n=setTimeout(()=>{clearInterval(s),e()},o),s=setInterval(()=>{i.cancelled&&(clearTimeout(n),clearInterval(s),t(new Error("Processing cancelled by user during API retry wait.")))},100)})}function _(o,i){let e;if(i.useMultiModelSettings)switch(o){case"addLinks":e=i.addLinksProvider;break;case"research":e=i.researchProvider;break;case"generateTitle":e=i.generateTitleProvider;break;case"translate":e=i.translateProvider;break;default:console.warn(`Unknown task type '${o}' in getProviderForTask. Falling back to active provider.`),e=i.activeProvider}else e=i.activeProvider;let t=i.providers.find(n=>n.name===e);if(!t){let n=`Provider configuration not found for name: '${e}' (Task: ${o}).`;console.error(n);let s=i.providers.find(a=>a.name===i.activeProvider);if(s&&e!==i.activeProvider)return new fe.Notice(`${n} Falling back to active provider '${i.activeProvider}'.`),s;new fe.Notice(`${n} Active provider '${i.activeProvider}' also not found.`);return}return t}function z(o,i,e){var n,s,a,r;let t=i.model;if(e.useMultiModelSettings)switch(o){case"addLinks":t=((n=e.addLinksModel)==null?void 0:n.trim())||i.model;break;case"research":t=((s=e.researchModel)==null?void 0:s.trim())||i.model;break;case"generateTitle":t=((a=e.generateTitleModel)==null?void 0:a.trim())||i.model;break;case"translate":t=((r=e.translateModel)==null?void 0:r.trim())||i.model;break;default:console.warn(`Unknown task type '${o}' in getModelForTask. Using provider default.`),t=i.model}else t=i.model;return t||i.model}function Te(o){let i=`Completely decompose and structure the knowledge points in this markdown document, outputting them in markdown format supported by Obsidian. Core knowledge points should be labelled with Obsidian's backlink format [[]]. Do not output anything other than the original text and the requested "Obsidian's backlink format [[]]".

Rules:
1. Only add Obsidian backlinks [[like this]] to core concepts. Do not modify the original text content or formatting otherwise.
2. Skip conventional names (common products, company names, dates, times, individual names) unless they represent a core technical or scientific concept within the text's context.
3. Output the *entire* original content of the chunk, preserving all formatting (headers, lists, code blocks, etc.), with only the added backlinks.
4. Handle duplicate concepts carefully:
    a. If both singular and plural forms of a word/concept appear (e.g., "model" and "models"), only add the backlink to the *first occurrence* of the *singular* form (e.g., [[model]]). Do not link the plural form.
    b. If a single-word concept (e.g., "relaxation") also appears as part of a multi-word concept (e.g., "dielectric relaxation"), only add the backlink to the *multi-word* concept (e.g., [[dielectric relaxation]]). Do not link the standalone single word in this case.
    c. Do not add duplicate backlinks for the exact same concept within this chunk. Link only the first meaningful occurrence.
5. Ignore any "References", "Bibliography", or similar sections, typically found at the end of documents. Do not add backlinks within these sections.`;return o.enableFocusedLearning&&o.focusedLearningDomain?`${`Relevant Fields: [USER: SPECIFY ONE OR MORE FIELDS HERE, e.g., '${o.focusedLearningDomain}']`}

${i}`:i}async function le(o){try{let i,e,t={method:"GET"};switch(o.name){case"Ollama":if(e=`${o.baseUrl}/tags`,t.headers={"Content-Type":"application/json"},i=await fetch(e,t),!i.ok)throw new Error(`Ollama API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:`Successfully connected to Ollama at ${o.baseUrl} and listed models.`};case"LMStudio":let n=`${o.baseUrl}/chat/completions`,s={method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey||"EMPTY"}`},body:JSON.stringify({model:o.model,messages:[{role:"system",content:"You are a helpful assistant"},{role:"user",content:"Hello"}],temperature:.7,max_tokens:10})};try{if(i=await fetch(n,s),i.ok){try{await i.json()}catch(a){console.warn("LMStudio test connection response was not valid JSON, but status was OK. Assuming success.")}return{success:!0,message:`Successfully connected to LMStudio API at ${o.baseUrl} using model '${o.model}'.`}}else{let a=await i.text();throw a.includes("Could not find model")?new Error(`LMStudio API error: Model '${o.model}' not found or loaded on the server.`):new Error(`LMStudio API error: ${i.status} - ${a}`)}}catch(a){let r=a instanceof Error?a.message:String(a);throw new Error(`LMStudio API connection failed: ${r}. Is the server running at ${o.baseUrl}?`)}case"OpenRouter":if(e=`${o.baseUrl}/chat/completions`,t.method="POST",t.headers={"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey}`,"HTTP-Referer":"https://github.com/Jacobinwwey/obsidian-NotEMD","X-Title":"Notemd Obsidian Plugin"},t.body=JSON.stringify({model:o.model,messages:[{role:"user",content:"Test connection"}],max_tokens:1,temperature:0}),i=await fetch(e,t),!i.ok)throw new Error(`OpenRouter API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:`Successfully connected to OpenRouter API using model '${o.model}'.`};case"OpenAI":if(e=`${o.baseUrl}/models`,t.headers={Authorization:`Bearer ${o.apiKey}`},i=await fetch(e,t),i.ok||(e=`${o.baseUrl}/chat/completions`,t.method="POST",t.headers={...t.headers,"Content-Type":"application/json"},t.body=JSON.stringify({model:o.model,messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),i=await fetch(e,t)),!i.ok)throw new Error(`OpenAI API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:`Successfully connected to OpenAI API at ${o.baseUrl}.`};case"DeepSeek":if(e=`${o.baseUrl}/models`,t.headers={Authorization:`Bearer ${o.apiKey}`},i=await fetch(e,t),i.ok||(e=`${o.baseUrl}/chat/completions`,t.method="POST",t.headers={...t.headers,"Content-Type":"application/json"},t.body=JSON.stringify({model:o.model,messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),i=await fetch(e,t)),!i.ok)throw new Error(`${o.name} API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:`Successfully connected to ${o.name} API at ${o.baseUrl}.`};case"Mistral":if(e=`${o.baseUrl}/models`,t.headers={Authorization:`Bearer ${o.apiKey}`},i=await fetch(e,t),i.ok||(e=`${o.baseUrl}/chat/completions`,t.method="POST",t.headers={...t.headers,"Content-Type":"application/json"},t.body=JSON.stringify({model:o.model,messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),i=await fetch(e,t)),!i.ok)throw new Error(`Mistral API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:`Successfully connected to Mistral API at ${o.baseUrl}.`};case"Anthropic":if(e=`${o.baseUrl}/v1/messages`,t.method="POST",t.headers={"Content-Type":"application/json","x-api-key":o.apiKey,"anthropic-version":"2023-06-01"},t.body=JSON.stringify({model:o.model,messages:[{role:"user",content:"Test"}],max_tokens:1}),i=await fetch(e,t),!i.ok)throw new Error(`Anthropic API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:"Successfully connected to Anthropic API."};case"Google":if(e=`${o.baseUrl}/models/${o.model}:generateContent?key=${o.apiKey}`,t.method="POST",t.headers={"Content-Type":"application/json"},t.body=JSON.stringify({contents:[{role:"user",parts:[{text:"Test"}]}],generationConfig:{maxOutputTokens:1,temperature:0}}),i=await fetch(e,t),!i.ok)throw new Error(`Google API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:"Successfully connected to Google API."};case"Azure OpenAI":if(!o.apiVersion||!o.baseUrl||!o.model)throw new Error("Azure requires Base URL, Model (Deployment Name), and API Version.");if(e=`${o.baseUrl}/openai/deployments/${o.model}/chat/completions?api-version=${o.apiVersion}`,t.method="POST",t.headers={"Content-Type":"application/json","api-key":o.apiKey},t.body=JSON.stringify({messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),i=await fetch(e,t),!i.ok)throw new Error(`Azure OpenAI API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:`Successfully connected to Azure OpenAI deployment '${o.model}'.`};case"xAI":if(e=`${o.baseUrl}/models`,t.headers={Authorization:`Bearer ${o.apiKey}`},i=await fetch(e,t),i.ok||(e=`${o.baseUrl}/chat/completions`,t.method="POST",t.headers={...t.headers,"Content-Type":"application/json"},t.body=JSON.stringify({model:o.model,messages:[{role:"user",content:"Test"}],max_tokens:1,temperature:0}),i=await fetch(e,t)),!i.ok)throw new Error(`xAI API error: ${i.status} - ${await i.text()}`);return await i.json(),{success:!0,message:`Successfully connected to xAI API at ${o.baseUrl}.`};default:return{success:!1,message:`Connection test not implemented for provider: ${o.name}`}}}catch(i){let e=i instanceof Error?i.message:String(i);return console.error(`Connection test failed for ${o.name}:`,i),{success:!1,message:`Connection failed: ${e}`}}}async function D(o,i,e,t,n,s,a,r){let d=null,l=n.enableStableApiCall?n.apiCallMaxRetries+1:1,m=n.enableStableApiCall?n.apiCallInterval:0;for(let c=1;c<=l;c++){if(s.cancelled)throw new Error("Processing cancelled by user before API attempt.");try{return await a(o,i,e,t,s,n,r)}catch(g){let p=g instanceof Error?g.message:String(g);if(d=g instanceof Error?g:new Error(p),console.warn(`${o.name} API Call: Attempt ${c} failed: ${p}`),g instanceof Error&&g.name==="AbortError"||p.includes("cancelled by user"))throw new Error("API call cancelled by user.");let u=p.match(/API error: (\d+)/),f=u?parseInt(u[1],10):null;if(f&&(f===400||f===401||f===403||f===404))throw d;let h=p.match(/\(Code: (\d+)\)/),y=h?parseInt(h[1],10):null;if(y&&y>=500)throw s.log(`[callApiWithRetry] Detected non-retryable error code ${y} within API response.`),d;if(s.cancelled)throw new Error("Processing cancelled by user during API retry sequence.");c<l&&(s.log(`Waiting ${m} seconds before retry ${c+1}...`),await L(m*1e3,s))}}throw console.error(`${o.name} API Call: All ${l} attempts failed.`),d||new Error(`${o.name} API call failed after multiple retries.`)}function F(o,i){if(i)return{signal:i,controller:null};let e=new AbortController;return o.abortController=e,{signal:e.signal,controller:e}}async function We(o,i,e,t,n,s,a){var c,g,p;if(!o.apiKey)throw new Error("API key is missing for DeepSeek provider.");let r=`${o.baseUrl}/chat/completions`,d={model:i,messages:[{role:"system",content:e},{role:"user",content:t}],temperature:o.temperature,max_tokens:s.maxTokens},{signal:l,controller:m}=F(n,a);try{await L(1,n);let u=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey}`},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!u.ok){let h=await u.text();throw new Error(`DeepSeek API error: ${u.status} - ${h}`)}let f=await u.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((p=(g=(c=f.choices)==null?void 0:c[0])==null?void 0:g.message)!=null&&p.content))throw new Error("Unexpected response format from DeepSeek API");return f.choices[0].message.content}finally{m&&n.abortController===m&&(n.abortController=null)}}async function He(o,i,e,t,n,s,a){var c,g,p;if(!o.apiKey)throw new Error("API key is missing for OpenAI provider.");let r=`${o.baseUrl}/chat/completions`,d={model:i,messages:[{role:"system",content:e},{role:"user",content:t}],temperature:o.temperature,max_tokens:s.maxTokens},{signal:l,controller:m}=F(n,a);try{await L(1,n);let u=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey}`},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!u.ok){let h=await u.text();throw new Error(`OpenAI API error: ${u.status} - ${h}`)}let f=await u.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((p=(g=(c=f.choices)==null?void 0:c[0])==null?void 0:g.message)!=null&&p.content))throw new Error("Unexpected response format from OpenAI API");return f.choices[0].message.content}finally{m&&n.abortController===m&&(n.abortController=null)}}async function Re(o,i,e,t,n,s,a){var c,g;if(!o.apiKey)throw new Error("API key is missing for Anthropic provider.");let r=`${o.baseUrl}/v1/messages`,d={model:i,system:e,messages:[{role:"user",content:t}],temperature:o.temperature,max_tokens:s.maxTokens},{signal:l,controller:m}=F(n,a);try{await L(1,n);let p=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json","x-api-key":o.apiKey,"anthropic-version":"2023-06-01"},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!p.ok){let f=await p.text();throw new Error(`Anthropic API error: ${p.status} - ${f}`)}let u=await p.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((g=(c=u.content)==null?void 0:c[0])!=null&&g.text))throw new Error("Unexpected response format from Anthropic API");return u.content[0].text}finally{m&&n.abortController===m&&(n.abortController=null)}}async function Ke(o,i,e,t,n,s,a){var c,g,p,u,f;if(!o.apiKey)throw new Error("API key is missing for Google provider.");let r=`${o.baseUrl}/models/${i}:generateContent?key=${o.apiKey}`,d={contents:[{role:"user",parts:[{text:`${e}

${t}`}]}],generationConfig:{temperature:o.temperature,maxOutputTokens:s.maxTokens}},{signal:l,controller:m}=F(n,a);try{await L(1,n);let h=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json"},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!h.ok){let S=await h.text();throw new Error(`Google API error: ${h.status} - ${S}`)}let y=await h.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((f=(u=(p=(g=(c=y.candidates)==null?void 0:c[0])==null?void 0:g.content)==null?void 0:p.parts)==null?void 0:u[0])!=null&&f.text))throw new Error("Unexpected response format from Google API");return y.candidates[0].content.parts[0].text}finally{m&&n.abortController===m&&(n.abortController=null)}}async function je(o,i,e,t,n,s,a){var c,g,p;if(!o.apiKey)throw new Error("API key is missing for Mistral provider.");let r=`${o.baseUrl}/chat/completions`,d={model:i,messages:[{role:"system",content:e},{role:"user",content:t}],temperature:o.temperature,max_tokens:s.maxTokens},{signal:l,controller:m}=F(n,a);try{await L(1,n);let u=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey}`},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!u.ok){let h=await u.text();throw new Error(`Mistral API error: ${u.status} - ${h}`)}let f=await u.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((p=(g=(c=f.choices)==null?void 0:c[0])==null?void 0:g.message)!=null&&p.content))throw new Error("Unexpected response format from Mistral API");return f.choices[0].message.content}finally{m&&n.abortController===m&&(n.abortController=null)}}async function Ye(o,i,e,t,n,s,a){var c,g,p;if(!o.apiKey)throw new Error("API key is missing for Azure OpenAI provider.");if(!o.apiVersion||!o.baseUrl)throw new Error("API version and Base URL are required for Azure OpenAI");let r=`${o.baseUrl}/openai/deployments/${i}/chat/completions?api-version=${o.apiVersion}`,d={messages:[{role:"system",content:e},{role:"user",content:t}],temperature:o.temperature,max_tokens:s.maxTokens},{signal:l,controller:m}=F(n,a);try{await L(1,n);let u=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json","api-key":o.apiKey},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!u.ok){let h=await u.text();throw new Error(`Azure OpenAI API error: ${u.status} - ${h}`)}let f=await u.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((p=(g=(c=f.choices)==null?void 0:c[0])==null?void 0:g.message)!=null&&p.content))throw new Error("Unexpected response format from Azure OpenAI API");return f.choices[0].message.content}finally{m&&n.abortController===m&&(n.abortController=null)}}async function qe(o,i,e,t,n,s,a){var c,g,p;let r=`${o.baseUrl}/chat/completions`,d={model:i,messages:[{role:"system",content:e},{role:"user",content:t}],temperature:o.temperature,max_tokens:s.maxTokens},{signal:l,controller:m}=F(n,a);try{await L(1,n);let u=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey||"EMPTY"}`},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!u.ok){let h=await u.text();throw new Error(`LMStudio API error: ${u.status} - ${h}`)}let f=await u.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((p=(g=(c=f.choices)==null?void 0:c[0])==null?void 0:g.message)!=null&&p.content))throw new Error("Unexpected response format from LMStudio");return f.choices[0].message.content}finally{m&&n.abortController===m&&(n.abortController=null)}}async function Je(o,i,e,t,n,s,a){var c;let r=`${o.baseUrl}/chat`,d={model:i,messages:[{role:"system",content:e},{role:"user",content:t}],options:{temperature:o.temperature,num_predict:s.maxTokens},stream:!1},{signal:l,controller:m}=F(n,a);try{await L(1,n);let g=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json"},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!g.ok){let u=await g.text();throw new Error(`Ollama API error: ${g.status} - ${u}`)}let p=await g.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((c=p.message)!=null&&c.content))throw new Error("Unexpected response format from Ollama");return p.message.content}finally{m&&n.abortController===m&&(n.abortController=null)}}async function Xe(o,i,e,t,n,s,a){var g,p,u,f,h,y,S,k,C,T,E,M,se,ke,be;if(!o.apiKey)throw new Error("API key is missing for OpenRouter provider.");let r=`${o.baseUrl}/chat/completions`,d={model:i,messages:[{role:"system",content:e},{role:"user",content:t}],temperature:o.temperature,max_tokens:s.maxTokens},{signal:l,controller:m}=F(n,a),c=null;try{if(await L(1,n),n.log(`[OpenRouter] Calling API: ${r} with model ${i}`),c=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey}`,"HTTP-Referer":"https://github.com/Jacobinwwey/obsidian-NotEMD","X-Title":"Notemd Obsidian Plugin"},body:JSON.stringify(d)}),n.log(`[OpenRouter] Received response status: ${c.status}`),n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");let A=await c.text();if(n.log(`[OpenRouter] Read response text (length: ${A.length}).`),n.cancelled)throw new Error("Processing cancelled by user after reading response text.");if(!c.ok)throw n.log(`[OpenRouter] API Error Response Text: ${A}`),new Error(`OpenRouter API error: ${c.status} - ${A}`);let I;try{I=JSON.parse(A),n.log("[OpenRouter] Successfully parsed JSON response.")}catch(ge){return n.log(`[OpenRouter] Failed to parse JSON response, status was ${c.status}.`),n.log(`[OpenRouter] Raw response text: ${A}`),n.log("[OpenRouter] Warning: JSON parsing failed despite 200 OK. Using raw response text as potential content."),A}let Q=(g=I.choices)==null?void 0:g[0];if(Q&&(Q.finish_reason==="error"||Q.error)){let ge=((p=Q.error)==null?void 0:p.message)||"OpenRouter reported finish_reason: error",Pe=((u=Q.error)==null?void 0:u.code)||"N/A";throw n.log(`[OpenRouter] Error reported in JSON response: Code ${Pe}, Message: ${ge}`),new Error(`OpenRouter API reported an error: ${ge} (Code: ${Pe})`)}let ae=(y=(h=(f=I.choices)==null?void 0:f[0])==null?void 0:h.message)==null?void 0:y.content;if(!ae&&((C=(k=(S=I.choices)==null?void 0:S[0])==null?void 0:k.message)!=null&&C.reasoning)&&(n.log("[OpenRouter] 'content' field empty, using 'reasoning' field as fallback."),ae=(M=(E=(T=I.choices)==null?void 0:T[0])==null?void 0:E.message)==null?void 0:M.reasoning),!ae)throw n.log(`[OpenRouter] Unexpected JSON structure or empty content/reasoning: ${JSON.stringify(I)}`),new Error("Unexpected response format or empty content from OpenRouter");return n.log(`[OpenRouter] API call successful (using ${(be=(ke=(se=I.choices)==null?void 0:se[0])==null?void 0:ke.message)!=null&&be.content?"content":"reasoning"} field).`),ae}catch(A){throw A instanceof Error&&A.name==="AbortError"?n.log("[OpenRouter] Fetch aborted."):A instanceof Error?n.log(`[OpenRouter] Fetch error: ${A.message}`):n.log(`[OpenRouter] Unknown fetch error: ${A}`),A}finally{m&&n.abortController===m&&(n.abortController=null)}}async function Qe(o,i,e,t,n,s,a){var c,g,p;if(!o.apiKey)throw new Error("API key is missing for xAI provider.");let r=`${o.baseUrl}/chat/completions`,d={model:i,messages:[{role:"system",content:e},{role:"user",content:t}],temperature:o.temperature,max_tokens:s.maxTokens},{signal:l,controller:m}=F(n,a);try{await L(1,n);let u=await fetch(r,{method:"POST",signal:l,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.apiKey}`},body:JSON.stringify(d)});if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API response.");if(!u.ok){let h=await u.text();throw new Error(`xAI API error: ${u.status} - ${h}`)}let f=await u.json();if(n.cancelled||l.aborted)throw new Error("Processing cancelled by user after API success.");if(!((p=(g=(c=f.choices)==null?void 0:c[0])==null?void 0:g.message)!=null&&p.content))throw new Error("Unexpected response format from xAI API");return f.choices[0].message.content}finally{m&&n.abortController===m&&(n.abortController=null)}}function U(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,We,a)}function G(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,He,a)}function V(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,Re,a)}function W(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,Ke,a)}function H(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,je,a)}function R(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,Ye,a)}function K(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,qe,a)}function j(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,Je,a)}function Y(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,Xe,a)}function Ze(o,i,e,t,n,s,a){return D(o,i,e,t,s,n,Qe,a)}async function ce(o,i,e,t,n,s,a){let r=s||o.model;switch(o.name){case"DeepSeek":return U(o,r,i,e,n,t,a);case"OpenAI":return G(o,r,i,e,n,t,a);case"Anthropic":return V(o,r,i,e,n,t,a);case"Google":return W(o,r,i,e,n,t,a);case"Mistral":return H(o,r,i,e,n,t,a);case"Azure OpenAI":return R(o,r,i,e,n,t,a);case"LMStudio":return K(o,r,i,e,n,t,a);case"Ollama":return j(o,r,i,e,n,t,a);case"OpenRouter":return Y(o,r,i,e,n,t,a);case"xAI":return Ze(o,r,i,e,n,t,a);default:throw new Error(`Provider ${o.name} not supported`)}}var b=require("obsidian");function q(o){var a,r,d,l;let i=o.split(`
`),e=[],t=!1,n=[],s=-1;for(let m of i){let c=m.trim(),g=/^```\s*\(?\s*mermaid\s*\)?/;if(g.test(c))m=m.replace(g,"```mermaid"),t&&(s!==-1?((a=n[s+1])==null?void 0:a.trim())!=="```"&&n.splice(s+1,0,"```"):n.length>0&&n[0].trim().startsWith("```mermaid")&&n[n.length-1].trim()!=="```"&&(n.length===1||((r=n[1])==null?void 0:r.trim())!=="```")&&n.splice(1,0,"```"),e.push(...n)),t=!0,n=[m],s=-1;else if(t){if(!m.includes("subgraph")){let u="___PROTECTED_QUOTE___";for(m=m.replace(/\|"/g,`|${u}`),m=m.replace(/"\|/g,`${u}|`),m=m.replace(/^"(?!;|\s)(?!\])/g,'["'),m=m.replace(/([^\s\[])"(?!;|\s)(?!\])/g,'$1["'),m=m.replace(/";/g,'"];'),m=m.replace(new RegExp(u,"g"),'"'),m=m.replace(/\[";/g,'"];'),m=m.replace(/\?\[";/g,'?"];');m.includes('[";');)m=m.replace(/\[";/g,'"];'),m=m.replace(/\?\[";/g,'?"];');m=m.replace(/\[";/g,'"];'),m=m.replace(/\?\[";/g,'?"];'),m=m.replace(/\[";$/,'"];'),m=m.replace(/\["$/,'"]')}let p=m.replace(/[(){}]/g,"");n.push(p),p.includes("-->")&&(s=n.length-1),c==="```"&&(e.push(...n),t=!1,n=[],s=-1)}else e.push(m)}return t&&(s!==-1?(s+1>=n.length||((d=n[s+1])==null?void 0:d.trim())!=="```")&&n.splice(s+1,0,"```"):n.length>0&&(n[0].trim().startsWith("```mermaid")&&n[n.length-1].trim()!=="```"&&(n.length===1||((l=n[1])==null?void 0:l.trim())!=="```")?n.splice(1,0,"```"):n[n.length-1].trim()!=="```"&&n.push("```")),e.push(...n)),e.join(`
`)}function J(o){let i="___TEMP_DOLLAR_ESCAPE___",e=o;return e=e.replace(/\\\$/g,i),e=e.replace(/\\\(/g,"$").replace(/\\\)/g,"$"),e=e.replace(/\$\s*([^$]*?)\s*\$/g,(t,n)=>t.startsWith("$$")&&t.endsWith("$$")?t:`$${n.trim()}$`),e=e.replace(new RegExp(i,"g"),"$"),e}var B=require("obsidian");var ee=require("obsidian"),$=class extends ee.Modal{constructor(e,t,n){super(e);this.title=t,this.errorMessage=n}onOpen(){let{contentEl:e}=this;e.addClass("notemd-error-modal"),e.createEl("h3",{text:this.title}),e.createEl("pre",{cls:"notemd-error-message-block"}).setText(this.errorMessage);let n=e.createDiv({cls:"modal-button-container"}),s=n.createEl("button",{text:"Copy Error Details",cls:"mod-cta"});s.onclick=()=>{navigator.clipboard.writeText(this.errorMessage).then(()=>{new ee.Notice("Error details copied to clipboard!"),s.setText("Copied!"),setTimeout(()=>s.setText("Copy Error Details"),2e3)}).catch(r=>{new ee.Notice("Failed to copy error details. See console."),console.error("Failed to copy error to clipboard:",r)})};let a=n.createEl("button",{text:"Close"});a.onclick=()=>{this.close()}}onClose(){let{contentEl:e}=this;e.empty()}};var et={addLinks:`Completely decompose and structure the knowledge points in this markdown document, outputting them in markdown format supported by Obsidian. Core knowledge points should be labelled with Obsidian's backlink format [[]]. Do not output anything other than the original text and the requested "Obsidian's backlink format [[]]".

Rules:
1. Only add Obsidian backlinks [[like this]] to core concepts. Do not modify the original text content or formatting otherwise.
2. Skip conventional names (common products, company names, dates, times, individual names) unless they represent a core technical or scientific concept within the text's context.
3. Output the *entire* original content of the chunk, preserving all formatting (headers, lists, code blocks, etc.), with only the added backlinks.
4. Handle duplicate concepts carefully:
    a. If both singular and plural forms of a word/concept appear (e.g., "model" and "models"), only add the backlink to the *first occurrence* of the *singular* form (e.g., [[model]]). Do not link the plural form.
    b. If a single-word concept (e.g., "relaxation") also appears as part of a multi-word concept (e.g., "dielectric relaxation"), only add the backlink to the *multi-word* concept (e.g., [[dielectric relaxation]]). Do not link the standalone single word in this case.
    c. Do not add duplicate backlinks for the exact same concept within this chunk. Link only the first meaningful occurrence.
5. Ignore any "References", "Bibliography", or similar sections, typically found at the end of documents. Do not add backlinks within these sections.`,generateTitle:`Create comprehensive technical documentation about "{TITLE}" with a focus on scientific and mathematical rigor.
{RESEARCH_CONTEXT_SECTION}
Include:
1.  Detailed explanation of core concepts with their mathematical foundations. Start with a Level 2 Header (## {TITLE}).
2.  Key technical specifications with precise values and units (use tables).
3.  Common use cases with quantitative performance metrics.
4.  Implementation considerations with algorithmic complexity analysis (if applicable).
5.  Performance characteristics with statistical measures.
6.  Related technologies with comparative mathematical models.
7.  Mathematical equations in LaTeX format (using $$...$$ for display and $...$ for inline) with detailed explanations of all parameters and variables. Example: $$ P(f) = \\int_{-\\infty}^{\\infty} p(t) e^{-i2\\pi ft} dt $$
8.  Mermaid.js diagram code blocks using the format \`\`\`mermaid ... \`\`\` (IMPORTANT: without brackets "()" or "{}" for Mermaid diagrams) for complex relationships or system architectures,Enclosed node names with spaces/special characters in square brackets,which is [ and ], Avoids special LaTeX syntax and Added quotes around subgraph titles with special characters, "subgraph" and "end" cannot appear on the same line!For example:
\`\`\`mermaid
graph TD
    Start[Input: Year] --> IsDiv400["Year % 400 == 0?"];
    IsDiv400 -- Yes --> Leap[Leap Year, 366 days];
    IsDiv400 -- No --> IsDiv100["Year % 100 == 0?"];
    IsDiv100 -- Yes --> Common1[Common Year, 365 days];
    IsDiv100 -- No --> IsDiv4["Year % 4 == 0?"];
    IsDiv4 -- Yes --> Leap;
    IsDiv4 -- No --> Common2[Common Year, 365 days];
    Leap --> End[End];
    Common1 --> End;
    Common2 --> End;

    style Leap fill:#ccffcc,stroke:#006600
    style Common1 fill:#ffcccc,stroke:#990000
    style Common2 fill:#ffcccc,stroke:#990000
\`\`\` and \`\`\`mermaid
graph LR
    subgraph "Material Mechanical Properties"
        Stress --> Strain;
        Strain -- "Linear Ratio" --> Youngs_Modulus[E - Young's Modulus<br>Tensile Stiffness];
        Stress -- "Yield Point" --> Yield_Strength[\u03C3y - Yield Strength<br>Onset of Plasticity];
        Stress -- "Maximum Point" --> UTS[UTS - Ultimate Tensile Strength];
        Strain -- "Transverse/Axial Ratio" --> Poissons_Ratio[\u03BD - Poisson's Ratio];
        Shear_Stress --> Shear_Strain;
        Shear_Strain -- "Linear Ratio" --> Shear_Modulus[G - Shear Modulus<br>Shear Stiffness];
        Hydrostatic_Pressure --> Volumetric_Strain;
        Volumetric_Strain -- "Linear Ratio" --> Bulk_Modulus[K - Bulk Modulus<br>Volumetric Stiffness];

        Youngs_Modulus -- "Isotropic Relations" --> Shear_Modulus;
        Youngs_Modulus -- "Isotropic Relations" --> Bulk_Modulus;
        Youngs_Modulus -- "Isotropic Relations" --> Poissons_Ratio;
        Shear_Modulus -- "Isotropic Relations" --> Bulk_Modulus;
        Shear_Modulus -- "Isotropic Relations" --> Poissons_Ratio;
        Bulk_Modulus -- "Isotropic Relations" --> Poissons_Ratio;

        Yield_Strength --> Plasticity[Plastic Deformation Region];
        UTS --> Plasticity;
        Stress_Strain_Curve_Area --> Toughness;

    end

    style Youngs_Modulus fill:#ccf,stroke:#333,stroke-width:2px
    style Shear_Modulus fill:#cfc,stroke:#333,stroke-width:2px
    style Bulk_Modulus fill:#cff,stroke:#333,stroke-width:2px
    style Poissons_Ratio fill:#fcf,stroke:#333,stroke-width:2px
\`\`\` and 
\`\`\`mermaid
graph TD
    WavePattern -->|Mechanical?| Mechanical
    WavePattern -->|Electromagnetic?| Electromagnetic
    Mechanical -->|Longitudinal?| Sound
    Mechanical -->|Transverse?| SeismicWaves
    Sound[Sound Waves] -->|In air?| Acoustic[343 m/s, 20 Hz-20 kHz]
    SeismicWaves[Seismic Waves] -->|Body wave?| PWave[6.5 km/s]
    SeismicWaves -->|Surface wave?| RayleighWave[2.5 km/s]

    Electromagnetic -->|Free space?| EMFreeSpace[c=3e8 m/s]
    Electromagnetic -->|Guided medium?| OpticalFiber[Dispersion=1e-3 ps/nm/km]
\`\`\` and \`\`\`mermaid
graph TD
    subgraph "Theoretical Frameworks for Electromagnetism"
        QED["Standard Model QED Massless Photon"]
        Proca["Proca Theory Massive Photon - 'Yukawa Photon'"]
        Stueckelberg["Stueckelberg Mechanism Massive Photon"]
        DarkPhoton["Dark Photon Models New Gauge Boson"]
    end

    QED -- "Add Mass Term" --> Proca;
    Proca -- "Breaks Gauge Invariance" --> Issue1["Renormalization/High Energy Issues"];
    QED -- "Introduce Stueckelberg Field" --> Stueckelberg;
    Stueckelberg -- "Preserves Gauge Invariance" --> Proca_Unitary["Unitary Gauge -> Proca"];
    Stueckelberg -- "Theoretically Cleaner" --> Benefit1["Better Renormalizability"];
    QED -- "Add New U1' + Mixing" --> DarkPhoton;

    Proca -- "Feature: Yukawa Potential" --> YP["Vr ~ exp-mr/r"];
    QED -- "Feature: Coulomb Potential" --> CP["Vr ~ 1/r"];
    Proca -- "Feature: 3 d.o.f." --> DOF3["2 Transverse + 1 Longitudinal"];
    QED -- "Feature: 2 d.o.f." --> DOF2["2 Transverse"];

    style QED fill:#ccf,stroke:#333,stroke-width:2px
    style Proca fill:#fcc,stroke:#333,stroke-width:2px
    style Stueckelberg fill:#cfc,stroke:#333,stroke-width:2px
    style DarkPhoton fill:#ffc,stroke:#333,stroke-width:2px
\`\`\`.
9.  Use bullet points for lists longer than 3 items.
10. Include references to academic papers with DOI where applicable, under a "## References" section.
11. Preserve all mathematical formulas and scientific principles without simplification.
12. Define all variables and parameters used in equations.
13. Include statistical measures and confidence intervals where relevant.

Format directly for Obsidian markdown. Do NOT wrap the entire response in a markdown code block. Start directly with the Level 2 Header.`,researchSummarize:`Summarize the following search results for the topic "{TOPIC}". Provide a concise yet comprehensive overview. Focus on key findings, data, and important conclusions. Format the summary in Markdown. The output language should be {LANGUAGE}.

Search Results:
{SEARCH_RESULTS_CONTEXT}`,translate:`Translate the following text to {LANGUAGE}. Only output the translated text. Do not include the original text.
    
Text to translate:
{TEXT}`,summarizeToMermaid:`You are an AI assistant specializing in text analysis and data visualization. Your sole task is to act as a processor that converts the user-provided document into a single, comprehensive Mermaid diagram.
The most important point is: Delete all parentheses. Parentheses are not allowed in Mermaid diagrams.
    Primary Instructions:
Analyze and Summarize: Read the entire provided document to understand its structure and identify its primary sections and key ideas.
Generate Mermaid Diagram Only: Your entire output must be a single Mermaid code block. Do not include any titles, explanations, greetings, or any text whatsoever outside of the mermaid ... block.
Critical Syntax Rules for Obsidian Compatibility:
You must adhere strictly to the following rules to ensure the diagram renders correctly. Failure to follow these will result in errors.
Diagram Type: The diagram must begin with the mindmap keyword on the first line.
Hierarchy via Indentation: The structure of the mind map is defined only by indentation. Use a consistent four (4) spaces for each level of indentation.
Root Node: The first node after the mindmap declaration should be the root of the mind map, with its text enclosed in double parentheses inside the quotes, like this: root(("Title of the Document")).
No List Markers: Never use hyphens (-), double hyphens (--), asterisks (*), or any other characters to denote list items. Each new indented line is automatically a new node.
Character Replacement: As a safeguard, replace the --> character sequence with the word "to" or "implies" to avoid parsing conflicts.
Content and Structure Rules:
Hierarchical Structure: The Mermaid diagram must mirror the structure of the source document.
Root: The document's title will be the text for the root node.
Section Branches: Each major section of the document will be a primary branch (indented once).
Section Summary: For each section branch, provide a concise summary broken down into a maximum of five distinct child nodes. Each of these summary points must not exceed 300 words.
Key Sentences: After the summary points for a section, create a dedicated sub-branch titled "Key Sentences". Under this branch, list the most critical and insightful sentences extracted verbatim from that section, with each sentence as its own distinct node.
Example Output Format:
\`\`\`mermaid
mindmap
    Article Title
        Section 1: Title of the First Section
            Summary Point 1 for Section 1 - max 300 words
            Summary Point 2 for Section 1 - max 300 words
            Summary Point 3 for Section 1 - max 300 words
            Key Sentences
                The most critical original sentence from section 1.
                The second most critical original sentence from section 1.
        Section 2: Title of the Second Section
            Summary Point 1 for Section 2 - max 300 words
            Summary Point 2 for Section 2 - max 300 words
            Key Sentences
                The most critical original sentence from section 2.
                The second most critical original sentence from section 2.
\`\`\`
`};function we(o){return et[o]||""}function ue(o,i,e={}){let t=!1,n="";if(o.enableGlobalCustomPrompts)switch(i){case"addLinks":t=o.useCustomPromptForAddLinks,n=o.customPromptAddLinks;break;case"generateTitle":t=o.useCustomPromptForGenerateTitle,n=o.customPromptGenerateTitle;break;case"researchSummarize":t=o.useCustomPromptForResearchSummarize,n=o.customPromptResearchSummarize;break;case"summarizeToMermaid":t=o.useCustomPromptForSummarizeToMermaid,n=o.customPromptSummarizeToMermaid;break}let s=t&&n?n:we(i);o.enableFocusedLearning&&o.focusedLearningDomain&&(s=`${`Relevant Fields: [${o.focusedLearningDomain}]`}

${s}`);for(let a in e)s=s.replace(new RegExp(`{${a}}`,"g"),e[a]);return s}async function tt(o,i,e){let t=i.ddgMaxResults,s=`https://html.duckduckgo.com/html/?q=${encodeURIComponent(o)}`,a=[];e.log(`Querying DuckDuckGo HTML endpoint: ${s}`);try{let r=await(0,B.requestUrl)({url:s,method:"GET",headers:{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",Accept:"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8","Accept-Language":"en-US,en;q=0.5"}});if(r.status!==200)throw new Error(`DuckDuckGo request failed: ${r.status}`);let d=r.text;e.log(`Received HTML response from DuckDuckGo (${d.length} bytes). Parsing...`);let l=/<div class="result result--html[\s\S]*?<a class="result__a" href="([^"]*)"[\s\S]*?>(.*?)<\/a>[\s\S]*?<a class="result__snippet"[\s\S]*?>(.*?)<\/a>/g,m,c=0;for(;(m=l.exec(d))!==null&&c<t;){let g=m[1];if(g.startsWith("/l/?uddg=")){let h=new URLSearchParams(g.substring(3)).get("uddg");h?g=decodeURIComponent(h):(e.log(`Warning: Could not decode DDG redirect URL: ${m[1]}`),g=`https://duckduckgo.com${g}`)}else if(!g.startsWith("http"))try{let f=new URL("https://duckduckgo.com");g=new URL(g,f).toString()}catch(f){e.log(`Warning: Could not resolve relative URL: ${g}`);continue}let p=m[2].replace(/<.*?>/g,"").trim(),u=m[3].replace(/<.*?>/g,"").trim();p&&g&&u?(a.push({title:p,url:g,content:u}),c++):e.log(`Warning: Skipping partially parsed result (Title: ${!!p}, Link: ${!!g}, Snippet: ${!!u})`)}return a.length===0?e.log("Warning: Could not parse any valid results from DuckDuckGo HTML."):e.log(`Successfully parsed ${a.length} results from DuckDuckGo.`),a}catch(r){let l=`Automated DuckDuckGo search failed. Error: ${r instanceof Error?r.message:String(r)}. Consider using Tavily.`;return e.log(`Error: ${l}`),[]}}async function nt(o,i){i.log(`Fetching content from: ${o}`);try{let e=await(0,B.requestUrl)({url:o,method:"GET",headers:{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",Accept:"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"}}),t=e.headers["content-type"]||e.headers["Content-Type"]||"";if(!t.includes("text/html"))return i.log(`Skipping non-HTML content (${t}) from: ${o}`),`[Content skipped: Not HTML - ${t}]`;let s=e.text.replace(/<script[\s\S]*?<\/script>/gi,"").replace(/<style[\s\S]*?<\/style>/gi,"").replace(/<[^>]+>/g," ").replace(/\s+/g," ").trim();s=s.replace(/</g,"<").replace(/>/g,">").replace(/&/g,"&").replace(/"/g,'"').replace(/'/g,"'").replace(/&nbsp;/g," ");let a=15e3;return s.length>a&&(s=s.substring(0,a)+"... [content truncated]",i.log(`Truncated content from: ${o}`)),i.log(`Successfully fetched and extracted text from: ${o}`),s}catch(e){let t=e instanceof Error?e.message:String(e);return i.log(`Error fetching content from ${o}: ${t}`),`[Content skipped: Error fetching - ${t}]`}}async function ye(o,i,e,t){t.log(`Entering _performResearch for topic: "${e}"`);let n=`${e} wiki`,s="",a="",r=[];try{if(i.searchProvider==="tavily"){if(a="Tavily",t.log("Selected search provider: Tavily."),!i.tavilyApiKey)throw new Error("Tavily API key is not configured.");if(t.cancelled)throw new Error("Processing cancelled by user before Tavily search.");let l="https://api.tavily.com/search";t.log(`Searching Tavily for: "${n}"`),t.updateStatus("Searching Tavily...",10);let m={api_key:i.tavilyApiKey,query:n,search_depth:i.tavilySearchDepth,include_answer:!1,include_raw_content:!1,max_results:i.tavilyMaxResults},c=i.ddgFetchTimeout*1e3,g=new Promise((f,h)=>setTimeout(()=>h(new Error(`Tavily API request timed out after ${c/1e3}s`)),c)),p=await Promise.race([(0,B.requestUrl)({url:l,method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(m),throw:!1}),g]);if(t.cancelled)throw new Error("Processing cancelled by user during Tavily search.");if(!p||typeof p.status!="number")throw new Error("Tavily request failed or timed out.");if(p.status!==200)throw new Error(`Tavily API error: ${p.status} - ${p.text}`);let u=p.json;if(!u.results||u.results.length===0)return t.log("Tavily returned no results."),null;r=u.results.map(f=>({title:f.title,url:f.url,content:f.content})),t.log(`Fetched ${r.length} results from Tavily.`)}else{if(a="DuckDuckGo",t.log("Selected search provider: DuckDuckGo."),t.cancelled)throw new Error("Processing cancelled by user before DuckDuckGo search.");if(t.log(`Searching DuckDuckGo for: "${n}"`),t.updateStatus("Searching DuckDuckGo...",10),r=await tt(n,i,t),t.cancelled)throw new Error("Processing cancelled by user during DuckDuckGo search.");if(r.length===0)return t.log("DuckDuckGo search failed or returned no results."),null}let d=[];if(a==="DuckDuckGo"){t.log(`Fetching content for top ${r.length} DuckDuckGo results...`),t.updateStatus("Fetching content...",30);let l=r.map(async(c,g)=>{if(t.cancelled)throw new Error(`Processing cancelled by user before fetching DDG result ${g+1}.`);let p=new Promise((u,f)=>setTimeout(()=>f(new Error(`Timeout fetching ${c.url}`)),i.ddgFetchTimeout*1e3));try{return await Promise.race([nt(c.url,t),p])}catch(u){if((u instanceof Error?u.message:String(u)).includes("cancelled by user"))throw u;return`[Content skipped: Timeout or fetch error for ${c.url}]`}}),m=await Promise.allSettled(l);if(t.cancelled)throw new Error("Processing cancelled by user during DuckDuckGo content fetching.");d=m.map((c,g)=>{var p,u,f;if(c.status==="fulfilled")return c.value;if((u=(p=c.reason)==null?void 0:p.message)!=null&&u.includes("cancelled by user"))throw new Error("Processing cancelled by user during DuckDuckGo content fetching.");return`[Content skipped for ${r[g].url} due to error: ${(f=c.reason)==null?void 0:f.message}]`}),t.log("Finished fetching content for DuckDuckGo results.")}else t.log("Using snippets directly from Tavily results."),d=r.map(l=>l.content);if(t.cancelled)throw new Error("Processing cancelled by user before combining content.");if(d.length>0){t.log(`Combining ${d.length} fetched/snippet contents.`),s=`Research context for "${n}" (via ${a}):

`,r.forEach((c,g)=>{s+=`Result ${g+1}:
`,s+=`Title: ${c.title}
`,s+=`URL: ${c.url}
`,s+=`${a==="Tavily"?"Snippet":"Content"}: ${d[g]?d[g]:"[No content available]"}

`});let l=Ee(s),m=i.maxResearchContentTokens;if(t.log(`Estimated research context tokens: ${l}. Limit: ${m}`),l>m){let c=m*4;s=s.substring(0,c)+`

[...research context truncated due to token limit]`,t.log(`Truncated research context to ~${m} tokens.`)}return s.trim()}else return t.log("No content could be obtained from search results."),null}catch(d){let l=d instanceof Error?d.message:String(d);if(l.includes("cancelled by user"))throw t.log(`Research cancelled for "${e}".`),d;return t.log(`Error in _performResearch catch block for "${e}": ${l}`),console.error(`Error researching "${e}":`,d),null}}async function xe(o,i,e,t,n){n.log("Entering researchAndSummarize function.");let s=t.file;if(!s){n.log("Error: No active file found in researchAndSummarize.");return}let a=e.getSelection(),r=a?a.trim():s.basename;if(!r||r.trim()===""){new B.Notice("Please select the topic text in the editor first, or ensure the note has a title."),n.log("Exiting researchAndSummarize: Topic is empty."),n.updateStatus("No topic selected",-1);return}n.log(`Starting research for topic: "${r}"`);try{if(n.log(`Calling _performResearch for topic: "${r}"`),n.cancelled)throw new Error("Processing cancelled by user before research.");let d=await ye(o,i,r,n);if(n.cancelled)throw new Error("Processing cancelled by user during research.");if(!d){new B.Notice(`Research for "${r}" failed or returned no results. Summary not generated.`),n.log(`_performResearch returned null or empty context for "${r}".`),n.updateStatus("Research failed/No results",-1);return}n.log(`_performResearch returned context for "${r}" (length: ${d.length}).`),n.updateStatus("Summarizing research...",50);let l=_("research",i);if(!l)throw n.log("Error: Could not get provider for 'research' task."),new Error('No valid LLM provider configured for the "Research & Summarize" task.');let m=z("research",l,i);if(n.log(`Using provider "${l.name}" and model "${m}" for summarization.`),n.cancelled)throw new Error("Processing cancelled by user before summarization.");n.log(`Calling ${l.name} (Model: ${m}) for summarization...`);let c=i.useDifferentLanguagesForTasks?i.researchSummarizeLanguage:i.language,g=ue(i,"researchSummarize",{TOPIC:r,LANGUAGE:c,SEARCH_RESULTS_CONTEXT:d});n.log(`Constructed summary prompt (context length: ${d.length}).`);let p="";switch(l.name){case"DeepSeek":p=await U(l,m,g,"",n,i);break;case"OpenAI":p=await G(l,m,g,"",n,i);break;case"Anthropic":p=await V(l,m,"",g,n,i);break;case"Google":p=await W(l,m,g,"",n,i);break;case"Mistral":p=await H(l,m,g,"",n,i);break;case"Azure OpenAI":p=await R(l,m,g,"",n,i);break;case"LMStudio":p=await K(l,m,g,"",n,i);break;case"Ollama":p=await j(l,m,g,"",n,i);break;case"OpenRouter":p=await Y(l,m,g,"",n,i);break;default:throw new Error(`Unsupported provider for summarization: ${l.name}`)}if(n.cancelled)throw new Error("Processing cancelled by user after summarization.");n.log(`Generated summary using ${l.name}.`),n.updateStatus("Applying post-processing...",85);let u=p;try{if(u=J(u),n.cancelled)throw new Error("Processing cancelled by user during post-processing.");u=q(u),n.log("Mermaid/LaTeX cleanup applied to summary.")}catch(C){let T=C instanceof Error?C.message:String(C);if(T.includes("cancelled by user"))throw C;n.log(`Warning: Error during summary cleanup: ${T}`)}if(n.cancelled)throw new Error("Processing cancelled by user after post-processing.");let f=u.trim(),h=f.split(`
`);if(h.length>0&&h[0].trim()==="\\boxed{"&&(n.log("Removing '\\boxed{' wrapper from summary."),h.shift(),h.length>0&&h[h.length-1].trim()==="}"&&h.pop(),f=h.join(`
`)),n.cancelled)throw new Error("Processing cancelled by user before appending summary.");n.updateStatus("Appending summary...",90);let S=`

## Research Summary (via ${i.searchProvider==="tavily"?"Tavily":"DuckDuckGo"}): ${r}

`;e.replaceSelection(a);let k=e.getValue();e.setValue(k.trim()+S+f),n.updateStatus("Research and summary complete!",100),new B.Notice(`Research summary for "${r}" appended.`),n.log(`Research summary for "${r}" appended successfully.`)}catch(d){let l=d instanceof Error?d.message:String(d),m=d instanceof Error?d.stack||l:String(d);if(l.includes("cancelled by user"))throw n.log(`Research cancelled for "${r}".`),n.updateStatus("Cancelled",-1),d;console.error(`Error researching "${r}":`,m),new B.Notice(`Error during research: ${l}. See console.`,1e4),n.log(`Error in researchAndSummarize catch block: ${l}`),n.updateStatus("Error occurred",-1),new $(o,"Research Error",m).open()}}var $e=require("obsidian");function Me(o,i){return new Promise(e=>{let t=new $e.Modal(o);t.titleEl.setText("Confirm duplicate deletion"),t.contentEl.addClass("notemd-confirm-delete-modal"),t.contentEl.createEl("p",{text:`The following ${i.length} concept notes are identified as potential duplicates and will be moved to system trash:`});let n=t.contentEl.createEl("ul",{cls:"notemd-delete-list"});i.forEach(d=>{let l=n.createEl("li");l.createSpan({text:`${d.path} `,cls:"notemd-delete-path"}),l.createSpan({text:`(Reason: ${d.reason})`,cls:"notemd-delete-reason"}),d.counterparts&&d.counterparts.length>0&&(l.createEl("br"),l.createSpan({text:`Conflicts with: ${d.counterparts.join(", ")}`,cls:"notemd-delete-counterparts"}))}),t.contentEl.createEl("p",{text:"This action cannot be easily undone from within Obsidian, but files can usually be recovered from the system trash.",cls:"mod-warning"});let s=t.contentEl.createDiv({cls:"modal-button-container"}),a=s.createEl("button",{text:`Delete ${i.length} files`,cls:"mod-warning"});a.onclick=()=>{t.close(),e(!0)};let r=s.createEl("button",{text:"Cancel"});r.onclick=()=>{t.close(),e(!1)},t.open()})}async function Ae(o,i,e){var m,c;let t=((m=i.split("/").pop())==null?void 0:m.replace(".md",""))||"",n=((c=e.split("/").pop())==null?void 0:c.replace(".md",""))||"";if(!t||!n||t===n)return;new b.Notice(`Updating links for renamed file: ${n}`,5e3);let s=t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),a=new RegExp(`\\[\\[${s}\\]\\]`,"g"),r=o.vault.getMarkdownFiles(),d=0,l=[];for(let g of r)if(g.path!==e)try{let p=await o.vault.read(g);if(p.match(a)){let u=p.replace(a,`[[${n}]]`);p!==u&&(await o.vault.modify(g,u),d++)}}catch(p){let u=p instanceof Error?p.message:String(p),f=`Error updating links in ${g.path} for rename: ${u}`;console.error(f,p),l.push(f)}d>0&&new b.Notice(`Updated links to "${n}" in ${d} files.`,5e3),l.length>0&&new b.Notice(`Encountered ${l.length} errors while updating links. Please check the developer console for more details.`,1e4)}async function Le(o,i){var d;let e=((d=i.split("/").pop())==null?void 0:d.replace(".md",""))||"";if(!e)return;new b.Notice(`Removing links for deleted file: ${e}`,5e3);let t=e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),n=new RegExp(`\\[\\[${t}\\]\\]`,"gi"),s=o.vault.getMarkdownFiles(),a=0,r=[];for(let l of s)try{let m=await o.vault.read(l),c=m;n.test(m)&&(c=m.replace(n,""),c=c.replace(/^[ \t]*[-*+]\s*$/gm,""),c=c.replace(/\n{3,}/g,`

`).trim(),m!==c&&(await o.vault.modify(l,c),a++))}catch(m){let c=m instanceof Error?m.message:String(m),g=`Error removing links from ${l.path} for delete: ${c}`;console.error(g,m),r.push(g)}a>0&&new b.Notice(`Removed links to "${e}" from ${a} files.`,5e3),r.length>0&&new b.Notice(`Encountered ${r.length} errors while removing links. Please check the developer console for more details.`,1e4)}async function st(o,i,e,t){if(!i.useCustomConceptNoteFolder||!i.conceptNoteFolder)return;let n=i.conceptNoteFolder,s=[],a=0,r=0;try{let d=o.vault.getAbstractFileByPath(n);if(!d)await o.vault.createFolder(n);else if(!(d instanceof b.TFolder))throw new Error(`Concept note output path '${n}' exists but is not a folder.`);for(let l of e){let m=Ce(l);if(m.length>100&&(m=m.substring(0,100).trim()),!m||/^\.+$/.test(m))continue;let c=`${n}/${m}.md`,g=o.vault.getAbstractFileByPath(c);try{if(g instanceof b.TFile){if(t){let p=await o.vault.read(g),u=`[[${t}]]`,f="## Linked From",h=`- ${u}`;if(!p.includes(h)){let y=p.trim(),S=y.indexOf(f);if(S!==-1){let k=y.indexOf(`
## `,S+1),C=k!==-1?k:y.length;y=y.substring(0,C).trim()+`
${h}`+y.substring(C).trim()}else y+=`

${f}
${h}`;y.trim()!==p.trim()&&(await o.vault.modify(g,y.trim()),r++)}}}else if(!g){let p=`# ${l}
`;await o.vault.create(c,p.trim()),a++,s.push(l)}}catch(p){let u=p instanceof Error?p.message:String(p);console.error(`Error processing concept note "${c}": ${u}`,p)}}i.generateConceptLogFile&&s.length>0&&await at(o,i,s)}catch(d){let l=d instanceof Error?d.message:String(d);console.error("Error creating concept notes:",d),new b.Notice(`Error creating concept notes: ${l}. Please check the developer console for more details.`)}}async function at(o,i,e){let t="";i.useCustomConceptLogFolder&&i.conceptLogFolderPath?t=i.conceptLogFolderPath:i.useCustomConceptNoteFolder&&i.conceptNoteFolder&&(t=i.conceptNoteFolder),t=t.replace(/^\/|\/$/g,""),t&&(t+="/");let n=i.useCustomConceptLogFileName&&i.conceptLogFileName?i.conceptLogFileName:P.conceptLogFileName,s=n.toLowerCase().endsWith(".log")?n:`${n}.log`,a=`${t}${s}`,r=`generate ${e.length} concepts md file
`;e.forEach((d,l)=>{r+=`${l+1}. ${d}
`});try{let d=t.replace(/\/$/,"");if(d&&!o.vault.getAbstractFileByPath(d))await o.vault.createFolder(d);else if(d&&!(o.vault.getAbstractFileByPath(d)instanceof b.TFolder)){new b.Notice(`Concept log output path '${d}' exists but is not a folder. Cannot create log file.`);return}let l=o.vault.getAbstractFileByPath(a);l instanceof b.TFile?(await o.vault.modify(l,r.trim()),new b.Notice(`Overwrote concept log file: ${a}`)):(await o.vault.create(a,r.trim()),new b.Notice(`Created concept log file: ${a}`))}catch(d){let l=d instanceof Error?d.message:String(d);console.error(`Error writing concept log file to ${a}:`,d),new b.Notice(`Error writing concept log file: ${l}. Please check the developer console for more details.`)}}function te(o){let i=new Set,e=new Set;return o.split(`
`).forEach(n=>{(n.match(/[\p{L}\p{N}]+(?:['\-][\p{L}\p{N}]+)*/gu)||[]).forEach(a=>{let r=a.toLowerCase().replace(/'s$/,"");r.length>2&&(e.has(r)&&i.add(r),e.add(r))})}),i}async function it(o,i){if(!i.enableDuplicateDetection){console.log("Duplicate detection is disabled in settings.");return}let e=new Set;te(o).forEach(n=>e.add(`Duplicate word: "${n}"`)),e.size>0&&(new b.Notice(`Found ${e.size} potential duplicate/consistency issues in processed content. Check console.`),console.log("Potential duplicate/consistency issues found in content:",Array.from(e)))}async function Se(o,i,e,t,n){n.value=e.basename,t.log(`Starting processing for: ${e.name}`);let s=await o.vault.read(e),a=_("addLinks",i);if(!a)throw new Error('No valid LLM provider configured for "Add Links" task.');let r=z("addLinks",a,i),d=re(s,i),l=[],m=d.length;t.log(`Splitting content into ${m} chunks.`);for(let S=0;S<m;S++){if(t.cancelled)throw new Error("Processing cancelled by user during chunk processing.");let k=d[S],C=Math.floor(S/m*100);t.updateStatus(`Processing chunk ${S+1}/${m}...`,C),t.log(`Processing chunk ${S+1}/${m}...`);let T=Te(i);try{let E;switch(a.name){case"DeepSeek":E=await U(a,r,T,k,t,i);break;case"OpenAI":E=await G(a,r,T,k,t,i);break;case"Anthropic":E=await V(a,r,T,k,t,i);break;case"Google":E=await W(a,r,T,k,t,i);break;case"Mistral":E=await H(a,r,T,k,t,i);break;case"Azure OpenAI":E=await R(a,r,T,k,t,i);break;case"LMStudio":E=await K(a,r,T,k,t,i);break;case"Ollama":E=await j(a,r,T,k,t,i);break;case"OpenRouter":E=await Y(a,r,T,k,t,i);break;default:throw new Error(`Unsupported provider: ${a.name}`)}l.push(E),t.log(`Chunk ${S+1} processed successfully.`)}catch(E){let M=E instanceof Error?E.message:String(E);console.error(`LLM processing error on chunk ${S+1} for ${e.name}:`,E),t.log(`Error processing chunk ${S+1}: ${M}`);return}}if(t.cancelled){t.log(`Processing cancelled for ${e.name} after LLM calls.`);return}t.updateStatus("Merging processed chunks...",90);let c=l.join(`

`).replace(/\n{3,}/g,`

`).trim();t.log(`Extracting concepts and creating notes for: ${e.name}...`);let g=new Set,p=/\[\[([^\[\]]+)\]\]/g,u,f=c;for(;(u=p.exec(f))!==null;){let S=u[1].trim();S&&S.length>1&&!/^\d+$/.test(S)&&g.add(S)}if(i.useCustomConceptNoteFolder&&i.conceptNoteFolder&&g.size>0){t.log(`Found ${g.size} concepts. Creating/updating notes...`);try{await st(o,i,g,e.basename)}catch(S){let k=S instanceof Error?S.message:String(S);t.log(`\u26A0\uFE0F Error during concept note creation: ${k}`)}}else g.size>0?t.log(`Found ${g.size} concepts, but concept note creation is disabled or folder not set.`):t.log("No concepts found in LLM output to create notes for.");if(t.log(`Checking for duplicates in: ${e.name}...`),await it(f,i),t.cancelled){t.log(`Processing cancelled for ${e.name} after duplicate check.`);return}t.log(`Cleaning Mermaid/LaTeX for: ${e.name}`);let h=f;try{h=J(h),h=q(h)}catch(S){let k=S instanceof Error?S.message:String(S);t.log(`Warning: Error during Mermaid/LaTeX cleanup for ${e.name}: ${k}`)}if(t.cancelled){t.log(`Processing cancelled for ${e.name} after post-processing.`);return}let y=h.split(`
`);if(y.length>0&&y[0].trim()==="\\boxed{"&&(y.shift(),y.length>0&&y[y.length-1].trim()==="}"&&y.pop(),h=y.join(`
`)),t.cancelled){t.log(`Processing cancelled for ${e.name} before saving.`);return}i.removeCodeFencesOnAddLinks?(t.log("Removing all code fences (```markdown and ```)..."),h=h.replace(/```markdown/g,""),h=h.replace(/```/g,"")):(t.log("Removing only ```markdown specifiers..."),h=h.replace(/```markdown/g,"")),await ot(o,i,e,h,t),t.log(`Finished processing: ${e.name}`),n.value=null}async function ot(o,i,e,t,n){var r,d;let s="";i.useCustomProcessedFileFolder&&i.processedFileFolder?s=i.processedFileFolder:s=((r=e.parent)==null?void 0:r.path)||"",s=s.replace(/^\/|\/$/g,""),s&&!s.endsWith("/")&&(s+="/"),((d=e.parent)==null?void 0:d.path)==="/"&&!(i.useCustomProcessedFileFolder&&i.processedFileFolder)&&(s="");let a=s.replace(/\/$/,"");if(a&&!o.vault.getAbstractFileByPath(a))try{await o.vault.createFolder(a),n.log(`Created processed file output folder: ${a}`)}catch(l){let m=l instanceof Error?l.message:String(l),c=`Error creating processed file output folder ${a}: ${m}. Please check folder permissions and path validity.`;throw n.log(c),new b.Notice(c,1e4),l instanceof Error?l:new Error(m)}else if(a&&!(o.vault.getAbstractFileByPath(a)instanceof b.TFolder)){let l=`Processed file output path '${a}' exists but is not a folder.`;throw n.log(l),new b.Notice(l,1e4),new Error(l)}if(i.moveOriginalFileOnProcess){let l=`${s}${e.name}`;if(n.log("Processing mode: Move & Overwrite original file."),l!==e.path){if(n.log(`Moving original file to: ${l}`),o.vault.getAbstractFileByPath(l))throw new Error(`File already exists at target move path: ${l}. Cannot move original file.`);await o.vault.rename(e,l);let c=o.vault.getAbstractFileByPath(l);if(c instanceof b.TFile)await o.vault.modify(c,t),n.log(`Overwrote content of moved file: ${l}`);else throw new Error(`Failed to find moved file at ${l} after rename.`)}else n.log(`Overwriting original file in place: ${e.path}`),await o.vault.modify(e,t),n.log(`Overwrote original file: ${e.path}`)}else{let l,m;if(i.useCustomAddLinksSuffix)if(i.addLinksCustomSuffix==="")l=e.path,m=`Overwriting original file (custom setting): ${l}`,n.log("Processing mode: Overwrite original (custom setting).");else{let c=i.addLinksCustomSuffix;c.toLowerCase().endsWith(".md")&&(c=c.substring(0,c.length-3)),l=`${s}${e.basename}${c}.md`,m=`Saving processed file with custom suffix: ${l}`,n.log("Processing mode: Create copy with custom suffix.")}else l=`${s}${e.basename}_processed.md`,m=`Saving processed file with default suffix: ${l}`,n.log("Processing mode: Create/Overwrite default processed copy.");if(n.log(m),l===e.path){let c=o.vault.getAbstractFileByPath(e.path);c instanceof b.TFile?(await o.vault.modify(c,t),n.log(`Overwrote original file: ${l}`)):(console.error(`Error: Tried to overwrite original file ${e.path}, but it was not found.`),n.log(`Error: Could not find original file ${e.path} to overwrite.`))}else{let c=o.vault.getAbstractFileByPath(l);c instanceof b.TFile?(await o.vault.modify(c,t),n.log(`Overwrote existing file: ${l}`)):(await o.vault.create(l,t),n.log(`Created processed file: ${l}`))}}}async function ve(o,i,e,t){var f;let n=e.basename,s=_("generateTitle",i);if(!s)throw new Error('No valid LLM provider configured for "Generate from Title" task.');let a=z("generateTitle",s,i);t.updateStatus(`Generating content for "${n}"...`,5),t.log(`Starting content generation for: ${e.name}`);let r="";if(i.enableResearchInGenerateContent){if(t.cancelled)throw new Error("Processing cancelled by user before research.");t.log(`Research enabled for "${n}". Performing web search...`),t.updateStatus(`Researching "${n}"...`,10);try{let h=await ye(o,i,n,t);if(t.cancelled)throw new Error("Processing cancelled by user during research.");h?(r=h,t.log(`Research context obtained for "${n}".`),t.updateStatus(`Summarizing research for "${n}"...`,15)):t.log(`Warning: Research for "${n}" returned no results or failed.`)}catch(h){let y=h instanceof Error?h.message:String(h);if(y.includes("cancelled by user"))throw h;t.log(`Error during research for "${n}": ${y}. Proceeding without web context.`)}}else t.log('Research disabled for "Generate from Title".');if(t.cancelled)throw new Error("Processing cancelled by user before generation prompt construction.");let d=`Create comprehensive technical documentation about "${n}" with a focus on scientific and mathematical rigor.`;r?d+=`

Use the following research context to inform the documentation:

${r}

Documentation based on the title "${n}" and the provided context:`:d+=`

Documentation based *only* on the title "${n}":`;let l=((f=i.availableLanguages.find(h=>h.code===i.language))==null?void 0:f.name)||i.language;if(i.language&&i.language!=="en"&&(d+=`
IMPORTANT: Process the request and perform all reasoning in English. However, the final output MUST be written in ${l}.In mermaid diagrams, it is necessary to translate into ${l} while retaining the English.`),d+=`

Include:
1.  Detailed explanation of core concepts with their mathematical foundations. Start with a Level 2 Header (## ${n}).
2.  Key technical specifications with precise values and units (use tables).
3.  Common use cases with quantitative performance metrics.
4.  Implementation considerations with algorithmic complexity analysis (if applicable).
5.  Performance characteristics with statistical measures.
6.  Related technologies with comparative mathematical models.
7.  Mathematical equations in LaTeX format (using $$...$$ for display and $...$ for inline) with detailed explanations of all parameters and variables. Example: $$ P(f) = \\int_{-\\infty}^{\\infty} p(t) e^{-i2\\pi ft} dt $$
8.  Mermaid.js diagram code blocks using the format \`\`\`mermaid ... \`\`\` (IMPORTANT: without brackets "()" or "{}" for Mermaid diagrams) for complex relationships or system architectures,Enclosed node names with spaces/special characters in square brackets,which is [ and ], Avoids special LaTeX syntax and Added quotes around subgraph titles with special characters, "subgraph" and "end" cannot appear on the same line!For example:
\`\`\`mermaid
graph TD
    Start[Input: Year] --> IsDiv400["Year % 400 == 0?"];
    IsDiv400 -- Yes --> Leap[Leap Year, 366 days];
    IsDiv400 -- No --> IsDiv100["Year % 100 == 0?"];
    IsDiv100 -- Yes --> Common1[Common Year, 365 days];
    IsDiv100 -- No --> IsDiv4["Year % 4 == 0?"];
    IsDiv4 -- Yes --> Leap;
    IsDiv4 -- No --> Common2[Common Year, 365 days];
    Leap --> End[End];
    Common1 --> End;
    Common2 --> End;

    style Leap fill:#ccffcc,stroke:#006600
    style Common1 fill:#ffcccc,stroke:#990000
    style Common2 fill:#ffcccc,stroke:#990000
\`\`\` and \`\`\`mermaid
graph LR
    subgraph "Material Mechanical Properties"
        Stress --> Strain;
        Strain -- "Linear Ratio" --> Youngs_Modulus[E - Young's Modulus<br>Tensile Stiffness];
        Stress -- "Yield Point" --> Yield_Strength[\u03C3y - Yield Strength<br>Onset of Plasticity];
        Stress -- "Maximum Point" --> UTS[UTS - Ultimate Tensile Strength];
        Strain -- "Transverse/Axial Ratio" --> Poissons_Ratio[\u03BD - Poisson's Ratio];
        Shear_Stress --> Shear_Strain;
        Shear_Strain -- "Linear Ratio" --> Shear_Modulus[G - Shear Modulus<br>Shear Stiffness];
        Hydrostatic_Pressure --> Volumetric_Strain;
        Volumetric_Strain -- "Linear Ratio" --> Bulk_Modulus[K - Bulk Modulus<br>Volumetric Stiffness];

        Youngs_Modulus -- "Isotropic Relations" --> Shear_Modulus;
        Youngs_Modulus -- "Isotropic Relations" --> Bulk_Modulus;
        Youngs_Modulus -- "Isotropic Relations" --> Poissons_Ratio;
        Shear_Modulus -- "Isotropic Relations" --> Bulk_Modulus;
        Shear_Modulus -- "Isotropic Relations" --> Poissons_Ratio;
        Bulk_Modulus -- "Isotropic Relations" --> Poissons_Ratio;

        Yield_Strength --> Plasticity[Plastic Deformation Region];
        UTS --> Plasticity;
        Stress_Strain_Curve_Area --> Toughness;

    end

    style Youngs_Modulus fill:#ccf,stroke:#333,stroke-width:2px
    style Shear_Modulus fill:#cfc,stroke:#333,stroke-width:2px
    style Bulk_Modulus fill:#cff,stroke:#333,stroke-width:2px
    style Poissons_Ratio fill:#fcf,stroke:#333,stroke-width:2px
\`\`\` and 
\`\`\`mermaid
graph TD
    WavePattern -->|Mechanical?| Mechanical
    WavePattern -->|Electromagnetic?| Electromagnetic
    Mechanical -->|Longitudinal?| Sound
    Mechanical -->|Transverse?| SeismicWaves
    Sound[Sound Waves] -->|In air?| Acoustic[343 m/s, 20 Hz-20 kHz]
    SeismicWaves[Seismic Waves] -->|Body wave?| PWave[6.5 km/s]
    SeismicWaves -->|Surface wave?| RayleighWave[2.5 km/s]

    Electromagnetic -->|Free space?| EMFreeSpace[c=3e8 m/s]
    Electromagnetic -->|Guided medium?| OpticalFiber[Dispersion=1e-3 ps/nm/km]
\`\`\` and \`\`\`mermaid
graph TD
    subgraph "Theoretical Frameworks for Electromagnetism"
        QED["Standard Model QED Massless Photon"]
        Proca["Proca Theory Massive Photon - 'Yukawa Photon'"]
        Stueckelberg["Stueckelberg Mechanism Massive Photon"]
        DarkPhoton["Dark Photon Models New Gauge Boson"]
    end

    QED -- "Add Mass Term" --> Proca;
    Proca -- "Breaks Gauge Invariance" --> Issue1["Renormalization/High Energy Issues"];
    QED -- "Introduce Stueckelberg Field" --> Stueckelberg;
    Stueckelberg -- "Preserves Gauge Invariance" --> Proca_Unitary["Unitary Gauge -> Proca"];
    Stueckelberg -- "Theoretically Cleaner" --> Benefit1["Better Renormalizability"];
    QED -- "Add New U1' + Mixing" --> DarkPhoton;

    Proca -- "Feature: Yukawa Potential" --> YP["Vr ~ exp-mr/r"];
    QED -- "Feature: Coulomb Potential" --> CP["Vr ~ 1/r"];
    Proca -- "Feature: 3 d.o.f." --> DOF3["2 Transverse + 1 Longitudinal"];
    QED -- "Feature: 2 d.o.f." --> DOF2["2 Transverse"];

    style QED fill:#ccf,stroke:#333,stroke-width:2px
    style Proca fill:#fcc,stroke:#333,stroke-width:2px
    style Stueckelberg fill:#cfc,stroke:#333,stroke-width:2px
    style DarkPhoton fill:#ffc,stroke:#333,stroke-width:2px
\`\`\`.
9.  Use bullet points for lists longer than 3 items.
10. Include references to academic papers with DOI where applicable, under a "## References" section.
11. Preserve all mathematical formulas and scientific principles without simplification.
12. Define all variables and parameters used in equations.
13. Include statistical measures and confidence intervals where relevant.

Format directly for Obsidian markdown. Do NOT wrap the entire response in a markdown code block. Start directly with the Level 2 Header.`,t.cancelled)throw new Error("Processing cancelled by user before API call.");t.log(`Calling ${s.name} to generate content...`);let m=i.enableResearchInGenerateContent?25:20;t.updateStatus(`Calling ${s.name}...`,m);let c;try{switch(s.name){case"DeepSeek":c=await U(s,a,d,"",t,i);break;case"OpenAI":c=await G(s,a,d,"",t,i);break;case"Anthropic":c=await V(s,a,"",d,t,i);break;case"Google":c=await W(s,a,d,"",t,i);break;case"Mistral":c=await H(s,a,d,"",t,i);break;case"Azure OpenAI":c=await R(s,a,d,"",t,i);break;case"LMStudio":c=await K(s,a,d,"",t,i);break;case"Ollama":c=await j(s,a,d,"",t,i);break;case"OpenRouter":c=await Y(s,a,d,"",t,i);break;default:throw new Error(`Unsupported provider for content generation: ${s.name}`)}}catch(h){let y=h instanceof Error?h.message:String(h);throw console.error(`LLM generation error for ${e.name}:`,h),t.log(`Error generating content for ${e.name}: ${y}`),h instanceof Error?h:new Error(y)}if(t.cancelled)throw new Error("Processing cancelled by user after API call.");t.log(`Content received from ${s.name}.`),t.updateStatus("Applying post-processing...",80);let g=c;try{if(g=J(g),t.cancelled)throw new Error("Processing cancelled by user during post-processing.");g=q(g),t.log("Mermaid/LaTeX cleanup applied.")}catch(h){let y=h instanceof Error?h.message:String(h);if(y.includes("cancelled by user"))throw h;t.log(`Warning: Error during Mermaid/LaTeX cleanup: ${y}`)}if(t.cancelled)throw new Error("Processing cancelled by user after post-processing.");let p=g.trim(),u=p.split(`
`);if(u.length>0&&u[0].trim()==="\\boxed{"&&(u.shift(),u.length>0&&u[u.length-1].trim()==="}"&&u.pop(),p=u.join(`
`)),t.cancelled)throw new Error("Processing cancelled by user before saving.");t.log(`Replacing content in: ${e.name}`),t.updateStatus("Saving content...",95),await o.vault.modify(e,p),t.log(`Content generated successfully for ${e.name}.`)}async function De(o,i,e,t){var c,g;let n=o.vault.getAbstractFileByPath(e);if(!n||!(n instanceof b.TFolder))throw new Error(`Selected path is not a valid folder: ${e}`);let s;i.useCustomGenerateTitleOutputFolder?s=i.generateTitleOutputFolderName||P.generateTitleOutputFolderName:s=`${e==="/"?"Vault":n.name}_complete`;let r=`${((c=n.parent)==null?void 0:c.path)==="/"?"":(g=n.parent)!=null&&g.path?n.parent.path+"/":""}${s}`;t.log(`Determined 'complete' folder path: ${r}`);let d=r===""?"":r.endsWith("/")?r:r+"/",l=o.vault.getMarkdownFiles().filter(p=>{let u=p.path.startsWith(e==="/"?"":e+"/"),f=d?p.path.startsWith(d):!1;return u&&!f&&!p.name.endsWith("_processed.md")});if(l.length===0)return new b.Notice(`No eligible '.md' files found in "${e}" (excluding '${s}').`),t.log(`No eligible '.md' files found in "${e}" (excluding '${s}').`),t.updateStatus("No files found",100),{errors:[]};t.log(`Starting batch content generation for ${l.length} files in "${e}"...`);let m=[];try{let p=r.endsWith("/")&&r!=="/"?r.slice(0,-1):r;if(!await o.vault.adapter.exists(p))await o.vault.createFolder(p),t.log(`Created 'complete' folder: ${p}`);else{let f=await o.vault.adapter.stat(p);if((f==null?void 0:f.type)!=="folder")throw new Error(`Path for 'complete' folder (${p}) exists but is not a directory.`)}}catch(p){let u=p instanceof Error?p.message:String(p);throw new b.Notice(`Error ensuring 'complete' folder exists: ${u}`),t.log(`Error ensuring 'complete' folder exists at ${r}: ${u}`),p instanceof Error?p:new Error(u)}for(let p=0;p<l.length;p++){let u=l[p],f=Math.floor(p/l.length*100);if(t.updateStatus(`Generating ${p+1}/${l.length}: ${u.name}`,f),t.cancelled){t.log("Cancellation requested, stopping batch processing.");break}await Z(1);try{await ve(o,i,u,t),await Z(1);try{let y=`${r?r.endsWith("/")?r:r+"/":""}${u.name}`;if(await o.vault.adapter.exists(y))t.log(`\u26A0\uFE0F File already exists at destination, skipping move: ${y}`);else if(await o.vault.adapter.exists(u.path))if(t.cancelled){t.log(`\u26A0\uFE0F Cancellation requested before moving ${u.name}. Skipping move.`);break}else await o.vault.rename(u,y),t.log(`\u2705 Moved processed file to: ${y}`);else t.log(`\u26A0\uFE0F Source file ${u.path} not found, skipping move.`)}catch(h){let y=h instanceof Error?h.message:String(h),S=`Error moving processed file ${u.name} to ${r}: ${y}`;console.error(S,h),t.log(`\u274C ${S}`),m.push({file:u.name,message:`Failed to move after generation: ${y}`})}}catch(h){let y=h instanceof Error?h.message:String(h),S=`Error generating content for ${u.name}: ${y}`;console.error(S,h),t.log(`\u274C ${S}`),m.push({file:u.name,message:y});let k=new Date().toISOString(),C=h instanceof Error?h.stack||h.message:String(h),T=`[${k}] Error generating content for ${u.path}:
Message: ${y}
Stack Trace:
${C}

`;try{await o.vault.adapter.append("error_processing_filename.log",T)}catch(E){let M=E instanceof Error?E.message:String(E);console.error("Failed to write to error_processing_filename.log:",E),t.log(`\u26A0\uFE0F Failed to write error details to log file: ${M}`)}if(y.includes("cancelled by user"))break}if(t.cancelled)break}return{errors:m}}async function Fe(o,i,e){let t=o.vault.getAbstractFileByPath(i);if(!t||!(t instanceof b.TFolder))throw new Error(`Selected path is not a valid folder: ${i}`);let n=o.vault.getMarkdownFiles().filter(r=>r.path.startsWith(i==="/"?"":i+"/"));if(n.length===0)return new b.Notice(`No '.md' files found in selected folder: ${i}`),e.log(`No eligible files found in "${i}".`),e.updateStatus("No files found",100),{errors:[],modifiedCount:0};e.log(`Starting batch Mermaid/LaTeX fix for ${n.length} files in "${i}"...`);let s=[],a=0;for(let r=0;r<n.length;r++){let d=n[r],l=Math.floor(r/n.length*100);if(e.updateStatus(`Fixing ${r+1}/${n.length}: ${d.name}`,l),e.cancelled){e.log("Cancellation requested, stopping batch fix.");break}await Z(1);try{let m=await o.vault.read(d),c=m;c=J(c),c=q(c),c.trim()!==m.trim()?(await o.vault.modify(d,c),e.log(`\u2705 Fixed syntax in: ${d.name}`),a++):e.log(`\u2796 No changes needed for: ${d.name}`)}catch(m){let c=m instanceof Error?m.message:String(m),g=`Error fixing syntax in ${d.name}: ${c}`;console.error(g,m),e.log(`\u274C ${g}`),s.push({file:d.name,message:c});let p=new Date().toISOString(),u=m instanceof Error?m.stack||m.message:String(m),f=`[${p}] Error fixing syntax in ${d.path}:
Message: ${c}
Stack Trace:
${u}

`;try{await o.vault.adapter.append("error_syntax_fix.log",f)}catch(h){let y=h instanceof Error?h.message:String(h);console.error("Failed to write to error_syntax_fix.log:",h),e.log(`\u26A0\uFE0F Failed to write error details to log file: ${y}`)}if(c.includes("cancelled by user"))break}if(e.cancelled)break}return{errors:s,modifiedCount:a}}async function Ne(o,i,e,t,n){var c;let s="";i.useCustomSummarizeToMermaidSavePath&&i.summarizeToMermaidSavePath?s=i.summarizeToMermaidSavePath:s=((c=e.parent)==null?void 0:c.path)||"",s=s.replace(/^\/|\/$/g,""),s&&!s.endsWith("/")&&(s+="/");let a=s.replace(/\/$/,"");if(a&&!o.vault.getAbstractFileByPath(a))try{await o.vault.createFolder(a),n.log(`Created Mermaid summary output folder: ${a}`)}catch(g){let p=g instanceof Error?g.message:String(g),u=`Error creating Mermaid summary output folder ${a}: ${p}. Please check folder permissions and path validity.`;throw n.log(u),new b.Notice(u,1e4),g instanceof Error?g:new Error(p)}else if(a&&!(o.vault.getAbstractFileByPath(a)instanceof b.TFolder)){let g=`Mermaid summary output path '${a}' exists but is not a folder.`;throw n.log(g),new b.Notice(g,1e4),new Error(g)}let r=i.summarizeToMermaidCustomSuffix;(!i.useCustomSummarizeToMermaidSuffix||!r)&&(r=P.summarizeToMermaidCustomSuffix),r.toLowerCase().endsWith(".md")&&(r=r.substring(0,r.length-3));let d=`${e.basename}${r}.md`,l=`${s}${d}`;n.log(`Saving Mermaid summary to: ${l}`);let m=o.vault.getAbstractFileByPath(l);return m instanceof b.TFile?(await o.vault.modify(m,t),n.log(`Overwrote existing Mermaid summary file: ${l}`)):(await o.vault.create(l,t),n.log(`Created Mermaid summary file: ${l}`)),l}async function Be(o,i,e){if(!i.useCustomConceptNoteFolder||!i.conceptNoteFolder)throw new Error("Concept Note Folder is not configured in settings. Cannot perform check.");let t=i.conceptNoteFolder,n=o.vault.getAbstractFileByPath(t);if(!n||!(n instanceof b.TFolder))throw new Error(`Concept Note Folder path "${t}" is invalid or not a folder.`);e.log(`Using Concept Note Folder: ${t}`),e.updateStatus("Gathering files...",10);let s=o.vault.getMarkdownFiles(),a=s.filter(u=>u.path.startsWith(t+"/")),r,d=t==="/"?"":t+"/";if(i.duplicateCheckScopeMode==="vault")e.log("Duplicate check mode: Comparing concept notes against 'Entire Vault' (excluding concept folder)."),r=s.filter(u=>!u.path.startsWith(d));else if(i.duplicateCheckScopeMode==="concept_folder_only")e.log("Duplicate check mode: Comparing concept notes against other notes within the 'Concept Folder Only'."),r=a;else{let u=i.duplicateCheckScopePaths.split(`
`).map(h=>h.trim().replace(/^\/|\/$/g,"")).filter(h=>h);if(u.length===0)throw new Error(`Duplicate check scope mode is '${i.duplicateCheckScopeMode}', but no paths were provided.`);for(let h of u){let y=o.vault.getAbstractFileByPath(h);if(!y||!(y instanceof b.TFolder))throw new Error(`Invalid folder path specified in duplicate check scope: "${h}"`);if(h===t||h.startsWith(d))throw new Error(`Duplicate check scope path "${h}" cannot be the concept folder or inside it.`)}let f=u.map(h=>h==="/"?"":h+"/");i.duplicateCheckScopeMode==="include"?(e.log(`Duplicate check mode: Comparing concept notes against 'Include Folders': ${u.join(", ")}`),r=s.filter(h=>!h.path.startsWith(d)&&f.some(y=>h.path.startsWith(y)))):(e.log(`Duplicate check mode: Comparing concept notes against vault, 'Exclude Folders': ${u.join(", ")}`),r=s.filter(h=>!h.path.startsWith(d)&&!f.some(y=>h.path.startsWith(y))))}if(a.length===0)throw new Error("No concept notes found in the specified folder.");e.log(`Found ${a.length} concept notes to check.`),e.log(`Comparing against ${r.length} notes in the defined scope.`);let l=new Map,m=new Map(s.map(u=>[u.path,u]));e.updateStatus("Checking exact filename matches...",20);let c=new Map;r.forEach(u=>{let f=u.basename.toLowerCase(),h=c.get(f)||[];h.push(u.path),c.set(f,h)}),i.duplicateCheckScopeMode==="concept_folder_only"&&a.forEach(u=>{let f=u.basename.toLowerCase(),h=c.get(f)||[];h.includes(u.path)||(h.push(u.path),c.set(f,h))}),a.forEach(u=>{let f=u.basename.toLowerCase(),y=(c.get(f)||[]).filter(S=>S!==u.path);y.length>0&&!l.has(u.path)&&(l.set(u.path,{reason:"Exact Match",counterparts:y}),e.log(`[Exact Match] ${u.path} matches ${y.join(", ")}`))}),e.updateStatus("Checking plural variants...",40);let g=new Set(r.map(u=>u.basename.toLowerCase()));i.duplicateCheckScopeMode==="concept_folder_only"&&a.forEach(u=>g.add(u.basename.toLowerCase())),a.forEach(u=>{if(l.has(u.path))return;let f=u.basename.toLowerCase(),h="";if(f.endsWith("ies")&&f.length>3?h=f.substring(0,f.length-3)+"y":f.endsWith("es")&&f.length>2?h=f.substring(0,f.length-2):f.endsWith("s")&&f.length>1&&(h=f.substring(0,f.length-1)),h&&g.has(h)){let y=r.concat(i.duplicateCheckScopeMode==="concept_folder_only"?a:[]).filter(S=>S.basename.toLowerCase()===h&&S.path!==u.path).map(S=>S.path);y.length>0&&!l.has(u.path)&&(l.set(u.path,{reason:`Plural of "${h}"`,counterparts:y}),e.log(`[Plural Match] ${u.path} is plural of ${y.join(", ")}`))}}),e.updateStatus("Checking normalized names...",60);let p=new Map;if(r.forEach(u=>{let f=u.basename.toLowerCase().replace(/[-_]/g," ").replace(/[^\p{L}\p{N} ]/gu,"").replace(/\s+/g," ").trim();if(f){let h=p.get(f)||[];h.push(u.path),p.set(f,h)}}),i.duplicateCheckScopeMode==="concept_folder_only"&&a.forEach(u=>{let f=u.basename.toLowerCase().replace(/[-_]/g," ").replace(/[^\p{L}\p{N} ]/gu,"").replace(/\s+/g," ").trim();if(f){let h=p.get(f)||[];h.includes(u.path)||(h.push(u.path),p.set(f,h))}}),a.forEach(u=>{if(l.has(u.path))return;let f=u.basename.toLowerCase().replace(/[-_]/g," ").replace(/[^\p{L}\p{N} ]/gu,"").replace(/\s+/g," ").trim();if(f){let y=(p.get(f)||[]).filter(S=>S!==u.path);if(y.length>0&&!l.has(u.path)){let S=y.map(k=>{var C;return((C=m.get(k))==null?void 0:C.basename)||k});l.set(u.path,{reason:`Normalized Match (to "${f}")`,counterparts:S}),e.log(`[Normalized Match] ${u.path} matches ${S.join(", ")}`)}}}),i.duplicateCheckScopeMode!=="concept_folder_only"?(e.updateStatus("Checking single-word containment...",80),a.forEach(u=>{if(l.has(u.path))return;let f=u.basename.split(/\s+/);if(f.length===1){let h=f[0].toLowerCase(),y=r.filter(S=>S.basename.toLowerCase().split(/\s+/).includes(h)&&S.basename.includes(" ")).map(S=>S.path);if(y.length>0&&!l.has(u.path)){let S=y.map(k=>{var C;return((C=m.get(k))==null?void 0:C.basename)||k});l.set(u.path,{reason:"Contained in Multi-Word Note",counterparts:S}),e.log(`[Containment] ${u.path} contained in ${S.join(", ")}`)}}})):e.log("Skipping single-word containment check (mode: 'Concept Folder Only')."),e.updateStatus("Reporting results...",95),l.size>0){let u=Array.from(l.entries()).map(([h,y])=>({path:h,reason:y.reason,counterparts:y.counterparts}));if(e.log(`--- Potential Duplicate Concept Notes Found (${l.size}) ---`),u.forEach(h=>{e.log(`- ${h.path} (Reason: ${h.reason}, Conflicts: ${h.counterparts.join(", ")||"N/A"})`)}),e.log("--------------------------------------------------"),e.log("Review the list above."),await Me(o,u)){e.log("User confirmed deletion. Proceeding...");let h=u.length;e.updateStatus(`Deleting ${h} files...`,0);let y=0,S=0;for(let C=0;C<u.length;C++){let T=u[C],E=Math.floor((C+1)/h*100);e.updateStatus(`Deleting ${C+1}/${h}: ${T.path}`,E),await Z(10);try{let M=o.vault.getAbstractFileByPath(T.path);M instanceof b.TFile?(await o.vault.trash(M,!0),e.log(`[DELETED] ${T.path}`),y++):e.log(`[SKIP] File not found or not a file: ${T.path}`)}catch(M){let se=M instanceof Error?M.message:String(M);e.log(`[ERROR] Failed to delete ${T.path}: ${se}`),S++}}let k=`Deletion complete. Deleted ${y} of ${u.length} identified files. Encountered ${S} errors.`;e.log(k),new b.Notice(k),e.updateStatus(k,100)}else e.log("Deletion cancelled by user."),new b.Notice("Duplicate deletion cancelled."),e.updateStatus("Duplicate check complete (deletion cancelled).",100)}else e.log("No potential duplicate concept notes found."),new b.Notice("No potential duplicate concept notes found."),e.updateStatus("Duplicate check complete.",100)}var de=require("obsidian"),N=class extends de.Modal{constructor(e){super(e);this.isCancelled=!1;this.startTime=0;this.currentAbortController=null}onOpen(){let{contentEl:e}=this;e.addClass("notemd-progress-modal"),new de.Setting(e).setName("Notemd processing").setHeading();let t=e.createEl("div",{cls:"notemd-status-container"});this.statusEl=t.createEl("p",{text:"Starting...",cls:"notemd-status-text"}),this.progressBarContainerEl=e.createEl("div",{cls:"notemd-progress-bar-container"}),this.progressBarContainerEl.addClass("is-hidden"),this.progressEl=this.progressBarContainerEl.createEl("div",{cls:"notemd-progress-bar-fill"}),this.timeRemainingEl=e.createEl("p",{text:"Estimated time remaining: calculating...",cls:"notemd-time-remaining"}),this.logEl=e.createEl("div",{cls:"notemd-log-output"});let n=e.createEl("div",{cls:"notemd-button-container"});this.cancelButton=n.createEl("button",{text:"Cancel",cls:"notemd-cancel-button"}),this.cancelButton.onclick=()=>this.requestCancel(),this.startTime=Date.now()}updateStatus(e,t){if(this.statusEl&&this.statusEl.setText(e),this.progressEl&&t!==void 0&&t>=0){let n=Math.min(100,Math.max(0,t));if(this.progressEl.dataset.progress=String(n),this.progressEl.setText(`${Math.round(n)}%`),this.progressEl.removeClass("is-error"),t>0&&this.startTime>0){let s=(Date.now()-this.startTime)/1e3,a=s/(t/100),r=Math.max(0,a-s);this.timeRemainingEl&&this.timeRemainingEl.setText(`Estimated time remaining: ${this.formatTime(r)}`)}else this.timeRemainingEl&&this.timeRemainingEl.setText("Estimated time remaining: calculating...");this.progressBarContainerEl&&this.progressBarContainerEl.removeClass("is-hidden")}else this.progressEl&&t!==void 0&&t<0&&(this.progressEl.dataset.progress="100",this.progressEl.addClass("is-error"),this.progressEl.setText("Cancelled/Error"),this.timeRemainingEl&&this.timeRemainingEl.setText("Processing stopped."),this.progressBarContainerEl&&this.progressBarContainerEl.removeClass("is-hidden"))}formatTime(e){let t=Math.floor(e/60),n=Math.floor(e%60);return`${t}m ${n}s`}log(e){if(this.logEl){let t=this.logEl.createEl("div",{cls:"notemd-log-entry"});t.createEl("span",{text:`[${new Date().toLocaleTimeString()}] `,cls:"notemd-log-time"}),t.createEl("span",{text:e,cls:"notemd-log-message"}),this.logEl.scrollTop=this.logEl.scrollHeight}}onClose(){let{contentEl:e}=this;e.empty()}get cancelled(){return this.isCancelled}requestCancel(){var e,t;this.isCancelled||(this.isCancelled=!0,this.updateStatus("Cancelling...",-1),this.log("User requested cancellation."),(e=this.currentAbortController)==null||e.abort(),(t=this.cancelButton)==null||t.setAttribute("disabled","true"))}clearDisplay(){var e;(e=this.logEl)==null||e.empty(),this.updateStatus("Starting...",0),this.isCancelled=!1,this.currentAbortController=null,this.cancelButton&&this.cancelButton.removeAttribute("disabled"),this.progressBarContainerEl&&this.progressBarContainerEl.addClass("is-hidden"),this.timeRemainingEl&&this.timeRemainingEl.setText(""),this.startTime=Date.now()}get abortController(){return this.currentAbortController}set abortController(e){this.currentAbortController=e!=null?e:null}};var w=require("obsidian");var me=class extends w.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}get providersFilePath(){return`${this.app.vault.configDir+"/plugins/"+this.plugin.manifest.id}/notemd-providers.json`}async exportProviderSettings(){try{let e=this.plugin.settings.providers,t=JSON.stringify(e,null,2),n=this.app.vault.configDir+"/plugins/"+this.plugin.manifest.id;try{await this.app.vault.adapter.exists(n)||await this.app.vault.adapter.mkdir(n)}catch(s){console.error("Error ensuring plugin directory exists:",s),new w.Notice(`Error creating plugin directory: ${s.message}`);return}await this.app.vault.adapter.write(this.providersFilePath,t),new w.Notice(`Provider settings exported successfully to ${this.providersFilePath}`)}catch(e){let t=e instanceof Error?e.message:String(e);console.error("Error exporting provider settings:",e),new w.Notice(`Error exporting settings: ${t}`)}}async importProviderSettings(){try{let e=this.providersFilePath;if(!await this.app.vault.adapter.exists(e)){new w.Notice(`Import file not found at ${e}. Please place your 'notemd-providers.json' file there.`);return}let n=await this.app.vault.adapter.read(e),s=JSON.parse(n);if(!Array.isArray(s))throw new Error("Imported file does not contain a valid provider array.");let a=new Map(this.plugin.settings.providers.map(l=>[l.name,l])),r=0,d=0;s.forEach(l=>{l&&typeof l.name=="string"?a.has(l.name)?(a.set(l.name,l),r++):(a.set(l.name,l),d++):console.warn("Skipping invalid provider object during import:",l)}),this.plugin.settings.providers=Array.from(a.values()),this.plugin.settings.providers.some(l=>l.name===this.plugin.settings.activeProvider)||(this.plugin.settings.activeProvider=P.activeProvider,new w.Notice("Active provider reset to default as previous one was not found after import.")),await this.plugin.saveSettings(),new w.Notice(`Successfully imported ${d} new and updated ${r} existing provider settings.`),this.display()}catch(e){let t=e instanceof Error?e.message:String(e);console.error("Error importing provider settings:",e),new w.Notice(`Error importing settings: ${t}`)}}display(){let{containerEl:e}=this;e.empty(),new w.Setting(e).setName("LLM providers").setHeading();let t=new w.Setting(e).setName("Manage provider configurations").setDesc("Export your current provider settings to a JSON file, or import settings from a file.");t.addButton(s=>s.setButtonText("Export providers").setTooltip("Save provider configurations").onClick(()=>this.exportProviderSettings())),t.addButton(s=>s.setButtonText("Import providers").setTooltip("Load provider configurations (merges)").onClick(()=>this.importProviderSettings())),new w.Setting(e).setName("Active provider").setDesc("Select the LLM provider to use for processing.").addDropdown(s=>{this.plugin.settings.providers.map(r=>r.name).sort().forEach(r=>s.addOption(r,r)),s.setValue(this.plugin.settings.activeProvider).onChange(async r=>{this.plugin.settings.activeProvider=r,await this.plugin.saveSettings(),this.display()})});let n=this.plugin.settings.providers.find(s=>s.name===this.plugin.settings.activeProvider);if(n?(new w.Setting(e).setName(`${n.name} details`).setHeading(),n.name!=="Ollama"&&new w.Setting(e).setName("API key").setDesc(`API key for ${n.name}. ${n.name==="LMStudio"?"(Optional, often 'EMPTY')":""}`).addText(s=>s.setPlaceholder(n.name==="LMStudio"?"Usually EMPTY or leave blank":"Enter your API key").setValue(n.apiKey).onChange(async a=>{n.apiKey=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Base URL / endpoint").setDesc(`The API endpoint for ${n.name}. ${n.name==="Azure OpenAI"?"Required.":""}`).addText(s=>{var a;return s.setPlaceholder(((a=P.providers.find(r=>r.name===n.name))==null?void 0:a.baseUrl)||"Enter API Base URL").setValue(n.baseUrl).onChange(async r=>{n.baseUrl=r,await this.plugin.saveSettings()})}),new w.Setting(e).setName("Model").setDesc(`Model name to use with ${n.name}.`).addText(s=>{var a;return s.setPlaceholder(((a=P.providers.find(r=>r.name===n.name))==null?void 0:a.model)||"Enter model name").setValue(n.model).onChange(async r=>{n.model=r,await this.plugin.saveSettings()})}),new w.Setting(e).setName("Temperature").setDesc("Controls randomness (0=deterministic, 1=creative).").addSlider(s=>s.setLimits(0,1,.1).setValue(n.temperature).onChange(async a=>{n.temperature=a,await this.plugin.saveSettings()}).setDynamicTooltip()),n.name==="Azure OpenAI"&&new w.Setting(e).setName("API version").setDesc("Required API version for Azure OpenAI (e.g., 2024-02-15-preview)").addText(s=>s.setPlaceholder("Enter API version").setValue(n.apiVersion||"").onChange(async a=>{n.apiVersion=a,await this.plugin.saveSettings()})),new w.Setting(e).setName(`Test ${n.name} connection`).setDesc("Verify API key, endpoint, and model accessibility.").addButton(s=>s.setButtonText("Test connection").setCta().onClick(async()=>{s.setDisabled(!0).setButtonText("Testing...");let a=new w.Notice(`Testing connection to ${n.name}...`,0);try{let r=await le(n);a.hide(),r.success?new w.Notice(`\u2705 Success: ${r.message}`,5e3):new w.Notice(`\u274C Failed: ${r.message}. Check console.`,1e4)}catch(r){let d=r instanceof Error?r.message:String(r);a.hide(),new w.Notice(`Error during connection test: ${d}`,1e4),console.error(`Error testing ${n.name} connection from settings:`,r)}finally{s.setDisabled(!1).setButtonText("Test connection")}}))):e.createEl("p",{text:"Error: Could not find configuration for the active provider.",cls:"notemd-error-text"}),new w.Setting(e).setName("Multi-model usage").setHeading(),new w.Setting(e).setName("Use different providers for tasks").setDesc('On: Select a specific LLM provider for each task below. Off: Use the single "Active Provider".').addToggle(s=>s.setValue(this.plugin.settings.useMultiModelSettings).onChange(async a=>{this.plugin.settings.useMultiModelSettings=a,a&&(this.plugin.settings.addLinksProvider=this.plugin.settings.addLinksProvider||this.plugin.settings.activeProvider,this.plugin.settings.researchProvider=this.plugin.settings.researchProvider||this.plugin.settings.activeProvider,this.plugin.settings.generateTitleProvider=this.plugin.settings.generateTitleProvider||this.plugin.settings.activeProvider),await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useMultiModelSettings){let s=this.plugin.settings.providers.map(r=>r.name).sort(),a=(r,d,l)=>{let m=new w.Setting(e).setName(`${l} provider & model`).setDesc(`Select provider and optionally override model for "${l}".`);m.addDropdown(u=>{s.forEach(f=>u.addOption(f,f)),u.setValue(this.plugin.settings[r]).onChange(async f=>{this.plugin.settings[r]=f,await this.plugin.saveSettings(),this.display()})});let c=this.plugin.settings[r],g=this.plugin.settings.providers.find(u=>u.name===c),p=g?g.model:"Provider not found";m.addText(u=>u.setPlaceholder(`Default: ${p}`).setValue(this.plugin.settings[d]||"").onChange(async f=>{this.plugin.settings[d]=f.trim()||void 0,await this.plugin.saveSettings()}))};a("addLinksProvider","addLinksModel","Add links (process file/folder)"),a("researchProvider","researchModel","Research & summarize"),a("generateTitleProvider","generateTitleModel","Generate from title"),a("translateProvider","translateModel","Translate"),a("summarizeToMermaidProvider","summarizeToMermaidModel","Summarise as Mermaid diagram")}if(new w.Setting(e).setName("Task: Translate").setHeading(),new w.Setting(e).setName("Customise translation file save path").setDesc("On: Save translated files to a specified path. Off: Save in the same folder as the original file.").addToggle(s=>s.setValue(this.plugin.settings.useCustomTranslationSavePath).onChange(async a=>{this.plugin.settings.useCustomTranslationSavePath=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomTranslationSavePath&&new w.Setting(e).setName("Translation save path").setDesc("The folder where translated files will be saved (relative to vault root).").addText(s=>s.setPlaceholder("e.g., Translations").setValue(this.plugin.settings.translationSavePath).onChange(async a=>{this.plugin.settings.translationSavePath=a.trim(),await this.plugin.saveSettings()})),new w.Setting(e).setName("Use custom suffix for translated files").setDesc('Enable to use a custom suffix instead of the default "_translated".').addToggle(s=>s.setValue(this.plugin.settings.useCustomTranslationSuffix).onChange(async a=>{this.plugin.settings.useCustomTranslationSuffix=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomTranslationSuffix&&new w.Setting(e).setName("Custom Suffix").setDesc("The custom suffix to append to translated filenames.").addText(s=>s.setPlaceholder("_my_translation").setValue(this.plugin.settings.translationCustomSuffix).onChange(async a=>{this.plugin.settings.translationCustomSuffix=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Task: Summarise as Mermaid diagram").setHeading(),new w.Setting(e).setName("Customise Mermaid summary save path").setDesc("On: Save Mermaid summary files to a specified path. Off: Save in the same folder as the original file.").addToggle(s=>s.setValue(this.plugin.settings.useCustomSummarizeToMermaidSavePath).onChange(async a=>{this.plugin.settings.useCustomSummarizeToMermaidSavePath=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomSummarizeToMermaidSavePath&&new w.Setting(e).setName("Mermaid summary save path").setDesc("The folder where Mermaid summary files will be saved (relative to vault root).").addText(s=>s.setPlaceholder("e.g., Summaries/Mermaid").setValue(this.plugin.settings.summarizeToMermaidSavePath).onChange(async a=>{this.plugin.settings.summarizeToMermaidSavePath=a.trim(),await this.plugin.saveSettings()})),new w.Setting(e).setName("Use custom suffix for Mermaid summary files").setDesc('Enable to use a custom suffix instead of the default "_summ".').addToggle(s=>s.setValue(this.plugin.settings.useCustomSummarizeToMermaidSuffix).onChange(async a=>{this.plugin.settings.useCustomSummarizeToMermaidSuffix=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomSummarizeToMermaidSuffix&&new w.Setting(e).setName("Custom Suffix").setDesc("The custom suffix to append to Mermaid summary filenames.").addText(s=>s.setPlaceholder("_mermaid_summary").setValue(this.plugin.settings.summarizeToMermaidCustomSuffix).onChange(async a=>{this.plugin.settings.summarizeToMermaidCustomSuffix=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Translate to corresponding language when summarising").setDesc("If selected, the summary output will be translated into the user's selected translation language; if not selected, the default will be the original text language.").addToggle(s=>s.setValue(this.plugin.settings.translateSummarizeToMermaidOutput).onChange(async a=>{this.plugin.settings.translateSummarizeToMermaidOutput=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Stable API calls").setHeading(),new w.Setting(e).setName("Enable stable API calls (retry logic)").setDesc("On: Automatically retry failed LLM API calls. Off: Fail on first error.").addToggle(s=>s.setValue(this.plugin.settings.enableStableApiCall).onChange(async a=>{this.plugin.settings.enableStableApiCall=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.enableStableApiCall&&(new w.Setting(e).setName("Retry interval (seconds)").setDesc("Wait time between retries.").addText(s=>s.setPlaceholder(String(P.apiCallInterval)).setValue(String(this.plugin.settings.apiCallInterval)).onChange(async a=>{let r=parseInt(a,10);!isNaN(r)&&r>=1&&r<=300?this.plugin.settings.apiCallInterval=r:this.plugin.settings.apiCallInterval=P.apiCallInterval,await this.plugin.saveSettings(),this.display()})),new w.Setting(e).setName("Maximum retries").setDesc("Max retry attempts.").addText(s=>s.setPlaceholder(String(P.apiCallMaxRetries)).setValue(String(this.plugin.settings.apiCallMaxRetries)).onChange(async a=>{let r=parseInt(a,10);!isNaN(r)&&r>=0&&r<=10?this.plugin.settings.apiCallMaxRetries=r:this.plugin.settings.apiCallMaxRetries=P.apiCallMaxRetries,await this.plugin.saveSettings(),this.display()}))),new w.Setting(e).setName("Processed file output").setHeading(),new w.Setting(e).setName("Customize processed file save path").setDesc("On: Save to specified path. Off: Save in original folder.").addToggle(s=>s.setValue(this.plugin.settings.useCustomProcessedFileFolder).onChange(async a=>{this.plugin.settings.useCustomProcessedFileFolder=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomProcessedFileFolder&&new w.Setting(e).setName("Processed file folder path").setDesc("Relative path within vault.").addText(s=>s.setPlaceholder("e.g., Processed/Notes").setValue(this.plugin.settings.processedFileFolder).onChange(async a=>{this.plugin.settings.processedFileFolder=a.trim(),await this.plugin.saveSettings()})),new w.Setting(e).setName("Move original file after processing").setDesc('On: Move original to processed folder. Off: Create copy named "_processed.md".').addToggle(s=>s.setValue(this.plugin.settings.moveOriginalFileOnProcess).onChange(async a=>{this.plugin.settings.moveOriginalFileOnProcess=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Use custom output filename for 'Add links'").setDesc("On: Use custom suffix/replacement. Off: Use '_processed.md'.").addToggle(s=>s.setValue(this.plugin.settings.useCustomAddLinksSuffix).onChange(async a=>{this.plugin.settings.useCustomAddLinksSuffix=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomAddLinksSuffix&&new w.Setting(e).setName("Custom suffix/replacement string").setDesc("Empty to overwrite original. Ex: '_linked'.").addText(s=>s.setPlaceholder("Leave empty to overwrite").setValue(this.plugin.settings.addLinksCustomSuffix).onChange(async a=>{this.plugin.settings.addLinksCustomSuffix=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Remove code fences on 'Add links'").setDesc("On: Remove all ```markdown and ``` fences from the final output of 'Process File' and 'Process Folder'. Off: Keep code fences.").addToggle(s=>s.setValue(this.plugin.settings.removeCodeFencesOnAddLinks).onChange(async a=>{this.plugin.settings.removeCodeFencesOnAddLinks=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Concept note output").setHeading(),new w.Setting(e).setName("Customize concept note path").setDesc("On: Create new concept notes in specified path. Off: Do not create automatically.").addToggle(s=>s.setValue(this.plugin.settings.useCustomConceptNoteFolder).onChange(async a=>{this.plugin.settings.useCustomConceptNoteFolder=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomConceptNoteFolder&&new w.Setting(e).setName("Concept note folder path").setDesc("Relative path within vault.").addText(s=>s.setPlaceholder("e.g., Concepts").setValue(this.plugin.settings.conceptNoteFolder).onChange(async a=>{this.plugin.settings.conceptNoteFolder=a.trim(),await this.plugin.saveSettings()})),new w.Setting(e).setName("Concept log file output").setHeading(),new w.Setting(e).setName("Generate concept log file").setDesc("On: Log newly created concept notes.").addToggle(s=>s.setValue(this.plugin.settings.generateConceptLogFile).onChange(async a=>{this.plugin.settings.generateConceptLogFile=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.generateConceptLogFile){let s=new w.Setting(e).setName("Customize log file save path"),a="On: Save log to specified path.";this.plugin.settings.useCustomConceptNoteFolder&&this.plugin.settings.conceptNoteFolder?a+=` Off: Save in Concept Note Folder ('${this.plugin.settings.conceptNoteFolder}')`:a+=" Off: Save in vault root.",s.setDesc(a),s.addToggle(d=>d.setValue(this.plugin.settings.useCustomConceptLogFolder).onChange(async l=>{this.plugin.settings.useCustomConceptLogFolder=l,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomConceptLogFolder&&new w.Setting(e).setName("Concept log folder path").setDesc("Relative path. Required if custom path enabled.").addText(d=>d.setPlaceholder("e.g., Logs/ConceptLogs").setValue(this.plugin.settings.conceptLogFolderPath).onChange(async l=>{this.plugin.settings.conceptLogFolderPath=l.trim(),await this.plugin.saveSettings()}));let r=new w.Setting(e).setName("Customize log file name");r.setDesc(`On: Use specified name. Off: Use "${P.conceptLogFileName}".`),r.addToggle(d=>d.setValue(this.plugin.settings.useCustomConceptLogFileName).onChange(async l=>{this.plugin.settings.useCustomConceptLogFileName=l,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomConceptLogFileName&&new w.Setting(e).setName("Concept log file name").setDesc("Name for the log file. Required if custom name enabled.").addText(d=>d.setPlaceholder(P.conceptLogFileName).setValue(this.plugin.settings.conceptLogFileName).onChange(async l=>{this.plugin.settings.conceptLogFileName=l.trim(),await this.plugin.saveSettings()}))}if(new w.Setting(e).setName("Content generation & output").setHeading(),new w.Setting(e).setName('Enable research in "Generate from title"').setDesc("On: Perform web research before generating.").addToggle(s=>s.setValue(this.plugin.settings.enableResearchInGenerateContent).onChange(async a=>{this.plugin.settings.enableResearchInGenerateContent=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Use custom output folder for 'Generate from title'").setDesc("On: Move completed files to custom folder. Off: Move to '[original_foldername]_complete'.").addToggle(s=>s.setValue(this.plugin.settings.useCustomGenerateTitleOutputFolder).onChange(async a=>{this.plugin.settings.useCustomGenerateTitleOutputFolder=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useCustomGenerateTitleOutputFolder&&new w.Setting(e).setName("Custom output folder name").setDesc("Subfolder name for completed files.").addText(s=>s.setPlaceholder(P.generateTitleOutputFolderName).setValue(this.plugin.settings.generateTitleOutputFolderName).onChange(async a=>{this.plugin.settings.generateTitleOutputFolderName=a.trim()||P.generateTitleOutputFolderName,await this.plugin.saveSettings(),this.display()})),new w.Setting(e).setName("Web research provider").setHeading(),new w.Setting(e).setName("Search provider").setDesc('Engine for "Research and Summarize".').addDropdown(s=>s.addOption("tavily","Tavily (requires API key)").addOption("duckduckgo","DuckDuckGo (experimental)").setValue(this.plugin.settings.searchProvider).onChange(async a=>{this.plugin.settings.searchProvider=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.searchProvider==="tavily"?(new w.Setting(e).setName("Tavily API key").setDesc("Required for Tavily. Get from tavily.com.").addText(s=>s.setPlaceholder("Enter Tavily API key (tvly-...)").setValue(this.plugin.settings.tavilyApiKey).onChange(async a=>{this.plugin.settings.tavilyApiKey=a.trim(),await this.plugin.saveSettings()})),new w.Setting(e).setName("Tavily max results").setDesc("Max results (1-20).").addText(s=>s.setPlaceholder(String(P.tavilyMaxResults)).setValue(String(this.plugin.settings.tavilyMaxResults)).onChange(async a=>{let r=parseInt(a,10);!isNaN(r)&&r>=1&&r<=20?this.plugin.settings.tavilyMaxResults=r:this.plugin.settings.tavilyMaxResults=P.tavilyMaxResults,await this.plugin.saveSettings(),this.display()})),new w.Setting(e).setName("Tavily search depth").setDesc('"advanced" uses more credits.').addDropdown(s=>s.addOption("basic","Basic").addOption("advanced","Advanced (2 Credits)").setValue(this.plugin.settings.tavilySearchDepth).onChange(async a=>{this.plugin.settings.tavilySearchDepth=a,await this.plugin.saveSettings()}))):this.plugin.settings.searchProvider==="duckduckgo"&&(new w.Setting(e).setName("DuckDuckGo max results").setDesc("Max results to parse.").addSlider(s=>s.setLimits(1,10,1).setValue(this.plugin.settings.ddgMaxResults).setDynamicTooltip().onChange(async a=>{this.plugin.settings.ddgMaxResults=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("DuckDuckGo content fetch timeout (seconds)").setDesc("Max wait time per result URL.").addSlider(s=>s.setLimits(5,60,5).setValue(this.plugin.settings.ddgFetchTimeout).setDynamicTooltip().onChange(async a=>{this.plugin.settings.ddgFetchTimeout=a,await this.plugin.saveSettings()}))),new w.Setting(e).setName("Max research content tokens").setDesc("Approx. max tokens from web results for summarization prompt.").addText(s=>s.setPlaceholder(String(P.maxResearchContentTokens)).setValue(String(this.plugin.settings.maxResearchContentTokens)).onChange(async a=>{let r=parseInt(a,10);!isNaN(r)&&r>100?this.plugin.settings.maxResearchContentTokens=r:this.plugin.settings.maxResearchContentTokens=P.maxResearchContentTokens,await this.plugin.saveSettings(),this.display()})),new w.Setting(e).setName("Processing parameters").setHeading(),new w.Setting(e).setName("Chunk word count").setDesc("Max words per chunk sent to LLM.").addText(s=>s.setPlaceholder(String(P.chunkWordCount)).setValue(String(this.plugin.settings.chunkWordCount)).onChange(async a=>{let r=parseInt(a,10);!isNaN(r)&&r>50?this.plugin.settings.chunkWordCount=r:this.plugin.settings.chunkWordCount=P.chunkWordCount,await this.plugin.saveSettings(),this.display()})),new w.Setting(e).setName("Enable duplicate detection").setDesc("Enable checks for duplicate terms (results in console).").addToggle(s=>s.setValue(this.plugin.settings.enableDuplicateDetection).onChange(async a=>{this.plugin.settings.enableDuplicateDetection=a,await this.plugin.saveSettings()})),new w.Setting(e).setName("Max tokens").setDesc("Max tokens LLM should generate per response.").addText(s=>s.setPlaceholder(String(P.maxTokens)).setValue(String(this.plugin.settings.maxTokens)).onChange(async a=>{let r=parseInt(a,10);!isNaN(r)&&r>0?this.plugin.settings.maxTokens=r:this.plugin.settings.maxTokens=P.maxTokens,await this.plugin.saveSettings(),this.display()})),new w.Setting(e).setName("Language settings").setHeading(),new w.Setting(e).setName("Output language").setDesc("Select the desired output language for LLM responses.").addDropdown(s=>{(this.plugin.settings.availableLanguages||P.availableLanguages).forEach(a=>{s.addOption(a.code,a.name)}),s.setValue(this.plugin.settings.language||P.language).onChange(async a=>{this.plugin.settings.language=a,await this.plugin.saveSettings()})}),new w.Setting(e).setName("Select different languages for different tasks.").setDesc('On: Select a specific language for each task below. Off: Use the single "Output language".').addToggle(s=>s.setValue(this.plugin.settings.useDifferentLanguagesForTasks).onChange(async a=>{this.plugin.settings.useDifferentLanguagesForTasks=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.useDifferentLanguagesForTasks){let s=this.plugin.settings.availableLanguages||P.availableLanguages,a=(r,d)=>{new w.Setting(e).setName(`${d} language`).setDesc(`Select the output language for "${d}".`).addDropdown(l=>{s.forEach(m=>{l.addOption(m.code,m.name)}),l.setValue(this.plugin.settings[r]).onChange(async m=>{this.plugin.settings[r]=m,await this.plugin.saveSettings()})})};a("generateTitleLanguage","Generate from title"),a("researchSummarizeLanguage","Research & summarize"),a("addLinksLanguage","Add links (process file/folder)"),a("summarizeToMermaidLanguage","Summarise as Mermaid diagram")}new w.Setting(e).setName("Duplicate check scope").setHeading(),new w.Setting(e).setName("Duplicate check scope mode").setDesc("Define the scope for finding duplicate counterparts.").addDropdown(s=>s.addOption("vault","Entire vault (default - compares concept notes to all other notes)").addOption("include","Include specific folders only (compares concept notes to notes in specified folders)").addOption("exclude","Exclude specific folders (compares concept notes to notes outside specified folders)").addOption("concept_folder_only","Concept folder only (compares concept notes against each other)").setValue(this.plugin.settings.duplicateCheckScopeMode).onChange(async a=>{this.plugin.settings.duplicateCheckScopeMode=a,await this.plugin.saveSettings(),this.display()})),(this.plugin.settings.duplicateCheckScopeMode==="include"||this.plugin.settings.duplicateCheckScopeMode==="exclude")&&new w.Setting(e).setName(this.plugin.settings.duplicateCheckScopeMode==="include"?"Include folders":"Exclude folders").setDesc(`Enter relative paths (one per line) for folders to ${this.plugin.settings.duplicateCheckScopeMode}. Required if mode is not 'Entire vault' or 'Concept folder only'. Paths are case-sensitive and use '/' as separator.`).addTextArea(s=>s.setPlaceholder(`e.g., Notes/ProjectA
Source Material`).setValue(this.plugin.settings.duplicateCheckScopePaths).onChange(async a=>{var m;let r=a.split(`
`).map(c=>c.trim()).filter(c=>c.length>0),d=!0,l=/[\\"<>\:\?#\^\[\]\|\s]/;for(let c of r){if(c.includes("\\")){new w.Notice(`Invalid path: "${c}". Use '/' as path separator, not '\\'.`,7e3),d=!1;break}if(l.test(c)){let g=(m=c.match(l))==null?void 0:m[0];new w.Notice(`Invalid character "${g}" in path: "${c}". Forbidden chars: space, \\, <, >, :, |, ?, #, ^, [, ]`,7e3),d=!1;break}}!a.trim()&&(this.plugin.settings.duplicateCheckScopeMode==="include"||this.plugin.settings.duplicateCheckScopeMode==="exclude")&&new w.Notice("Folder paths cannot be empty when 'Include' or 'Exclude' mode is selected.",5e3),d?(this.plugin.settings.duplicateCheckScopePaths=a,await this.plugin.saveSettings()):new w.Notice("Invalid path(s) detected. Settings not saved for this field.",5e3)}).inputEl.setAttrs({rows:4,style:"width: 100%;"})),new w.Setting(e).setName("Custom prompt settings").setHeading(),new w.Setting(e).setName("Enable custom prompts for specific tasks").setDesc("On: Allows you to override the default system prompts for selected tasks below. Off: Default prompts will always be used.").addToggle(s=>s.setValue(this.plugin.settings.enableGlobalCustomPrompts).onChange(async a=>{this.plugin.settings.enableGlobalCustomPrompts=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.enableGlobalCustomPrompts&&[{key:"addLinks",name:"Add Links (Process File/Folder)",useCustomSettingKey:"useCustomPromptForAddLinks",customPromptSettingKey:"customPromptAddLinks"},{key:"generateTitle",name:"Generate from Title",useCustomSettingKey:"useCustomPromptForGenerateTitle",customPromptSettingKey:"customPromptGenerateTitle"},{key:"researchSummarize",name:"Research & Summarize",useCustomSettingKey:"useCustomPromptForResearchSummarize",customPromptSettingKey:"customPromptResearchSummarize"},{key:"summarizeToMermaid",name:"Summarise as Mermaid diagram",useCustomSettingKey:"useCustomPromptForSummarizeToMermaid",customPromptSettingKey:"customPromptSummarizeToMermaid"}].forEach(a=>{if(new w.Setting(e).setName(`Use custom prompt for "${a.name}"`).setDesc("On: Use your custom prompt below for this task. Off: Use the default prompt.").addToggle(r=>r.setValue(this.plugin.settings[a.useCustomSettingKey]).onChange(async d=>{this.plugin.settings[a.useCustomSettingKey]=d,await this.plugin.saveSettings(),this.display()})),this.plugin.settings[a.useCustomSettingKey]){let r=e.createDiv();r.createEl("p",{text:`Default prompt for "${a.name}":`});let d=we(a.key),l=new w.TextAreaComponent(r).setValue(d).setDisabled(!0).inputEl.setAttrs({rows:5,style:"width: 100%; font-family: monospace; font-size: 0.9em; margin-bottom: 5px;"}),m=r.createEl("button",{text:"Copy Default Prompt"});m.onclick=()=>{navigator.clipboard.writeText(d),new w.Notice("Default prompt copied to clipboard!")},r.style.marginBottom="10px",new w.Setting(e).setName(`Custom prompt for "${a.name}"`).setDesc("Enter your custom prompt. Placeholders like {TITLE} or {RESEARCH_CONTEXT_SECTION} will be replaced if applicable for the task. Refer to the default prompt for available placeholders.").addTextArea(c=>c.setPlaceholder(`Enter your custom prompt for ${a.name}...`).setValue(this.plugin.settings[a.customPromptSettingKey]).onChange(async g=>{this.plugin.settings[a.customPromptSettingKey]=g,await this.plugin.saveSettings()}).inputEl.setAttrs({rows:10,style:"width: 100%;"}))}}),new w.Setting(e).setName("Focused learning domain").setHeading(),new w.Setting(e).setName("Enable focused learning domain").setDesc("On: Add a specific learning domain to your prompts to improve contextual understanding. Off: Use the default general prompt.").addToggle(s=>s.setValue(this.plugin.settings.enableFocusedLearning).onChange(async a=>{this.plugin.settings.enableFocusedLearning=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.enableFocusedLearning&&new w.Setting(e).setName("Learning domain").setDesc("Specify one or more fields, e.g., 'Materials Science', 'Polymer Physics', 'Machine Learning'. This will be added to the beginning of your prompts.").addText(s=>s.setPlaceholder("e.g., 'Materials Science', 'Polymer Physics'").setValue(this.plugin.settings.focusedLearningDomain).onChange(async a=>{this.plugin.settings.focusedLearningDomain=a,await this.plugin.saveSettings()}))}};var x=require("obsidian");var ne=class extends x.ItemView{constructor(e,t){super(e);this.statusEl=null;this.progressEl=null;this.progressBarContainerEl=null;this.timeRemainingEl=null;this.logEl=null;this.logContent=[];this.startTime=0;this.isProcessing=!1;this.isCancelled=!1;this.currentAbortController=null;this.activeLeafChangeHandler=null;this.processCurrentButton=null;this.processFolderButton=null;this.researchButton=null;this.generateTitleButton=null;this.batchGenerateTitleButton=null;this.checkDuplicatesButton=null;this.testConnectionButton=null;this.checkRemoveDuplicatesButton=null;this.batchMermaidFixButton=null;this.cancelButton=null;this.translateButton=null;this.summarizeToMermaidButton=null;this.languageSelector=null;this.plugin=t}getViewType(){return O}getDisplayText(){return ie}getIcon(){return oe}clearDisplay(){console.log("clearDisplay called."),this.logContent=[],this.logEl&&this.logEl.empty(),this.statusEl&&this.statusEl.setText("Ready"),this.progressEl&&(this.progressEl.dataset.progress="0",this.progressEl.setText(""),this.progressEl.removeClass("is-error")),this.timeRemainingEl&&this.timeRemainingEl.setText(""),this.progressBarContainerEl&&this.progressBarContainerEl.addClass("is-hidden"),this.cancelButton&&(this.cancelButton.disabled=!0,this.cancelButton.removeClass("is-active")),this.isProcessing=!1,this.isCancelled=!1,this.startTime=0,this.currentAbortController=null,this.updateButtonStates()}updateStatus(e,t){if(this.statusEl&&this.statusEl.setText(e),t!==void 0&&(t<0||t>=100)&&(this.isProcessing=!1),this.updateButtonStates(),t!==void 0&&this.progressEl&&this.progressBarContainerEl)if(this.progressBarContainerEl.removeClass("is-hidden"),t>=0){let n=Math.min(100,Math.max(0,t));if(this.progressEl.dataset.progress=String(n),this.progressEl.setText(`${Math.round(n)}%`),this.progressEl.removeClass("is-error"),t>0&&this.startTime>0){let s=(Date.now()-this.startTime)/1e3,a=s/(t/100),r=Math.max(0,a-s);this.timeRemainingEl&&this.timeRemainingEl.setText(`Est. time remaining: ${this.formatTime(r)}`)}else this.timeRemainingEl&&this.timeRemainingEl.setText("Est. time remaining: calculating...")}else this.progressEl.dataset.progress="100",this.progressEl.addClass("is-error"),this.progressEl.setText("Cancelled/Error"),this.timeRemainingEl&&this.timeRemainingEl.setText("Processing stopped.")}log(e){if(this.logEl){let t=`[${new Date().toLocaleTimeString()}]`,n=`${t} ${e}`;this.logContent.push(n);let s=this.logEl.createEl("div",{cls:"notemd-log-entry"});s.createEl("span",{text:t,cls:"notemd-log-time"}),s.createEl("span",{text:` ${e}`,cls:"notemd-log-message"}),this.logEl.scrollTop=this.logEl.scrollHeight}}formatTime(e){let t=Math.floor(e/60),n=Math.floor(e%60);return`${t}m ${n}s`}get cancelled(){return this.isCancelled}requestCancel(){var e;console.log(`requestCancel called. isProcessing: ${this.isProcessing}, isCancelled: ${this.isCancelled}`),this.isProcessing&&!this.isCancelled&&(this.isCancelled=!0,this.updateStatus("Cancelling...",-1),this.log("User requested cancellation."),(e=this.currentAbortController)==null||e.abort(),this.updateButtonStates())}get abortController(){return this.currentAbortController}set abortController(e){this.currentAbortController=e!=null?e:null}updateButtonStates(){console.log(`updateButtonStates called. isProcessing: ${this.isProcessing}, isCancelled: ${this.isCancelled}`);let e=this.isProcessing,t=this.isCancelled;this.processCurrentButton&&(this.processCurrentButton.disabled=e),this.processFolderButton&&(this.processFolderButton.disabled=e),this.researchButton&&(this.researchButton.disabled=e||!this.app.workspace.getActiveViewOfType(x.MarkdownView)),this.generateTitleButton&&(this.generateTitleButton.disabled=e),this.batchGenerateTitleButton&&(this.batchGenerateTitleButton.disabled=e),this.checkDuplicatesButton&&(this.checkDuplicatesButton.disabled=e),this.testConnectionButton&&(this.testConnectionButton.disabled=e),this.checkRemoveDuplicatesButton&&(this.checkRemoveDuplicatesButton.disabled=e),this.batchMermaidFixButton&&(this.batchMermaidFixButton.disabled=e),this.translateButton&&(this.translateButton.disabled=e),this.cancelButton&&(this.cancelButton.disabled=!e||t,!e||t?this.cancelButton.removeClass("is-active"):this.cancelButton.addClass("is-active")),this.updateResearchButtonState()}async onOpen(){let e=this.containerEl.children[1];e.empty(),e.addClass("notemd-sidebar-container"),e.createEl("h4",{text:"Original processing"});let t=e.createDiv({cls:"notemd-button-group"});this.processCurrentButton=t.createEl("button",{text:"Process file (add links)",cls:"mod-cta"}),this.processCurrentButton.title="Processes the current file to add [[wiki-links]] and create concept notes.",this.processCurrentButton.onclick=async()=>{if(!this.isProcessing){this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log("Starting: Process Current File..."),this.updateStatus("Processing current file...",0);try{await this.plugin.processWithNotemdCommand(this)}finally{this.isProcessing=!1,this.updateButtonStates()}}},this.processFolderButton=t.createEl("button",{text:"Process folder (add links)"}),this.processFolderButton.title="Processes all files in a selected folder to add [[wiki-links]] and create concept notes.",this.processFolderButton.onclick=async()=>{if(!this.isProcessing){this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log("Starting: Process Folder..."),this.updateStatus("Processing folder...",0);try{await this.plugin.processFolderWithNotemdCommand(this)}finally{this.isProcessing=!1,this.updateButtonStates()}}},e.createEl("h4",{text:"New features"});let n=e.createDiv({cls:"notemd-button-group"});this.researchButton=n.createEl("button",{text:"Research & summarize"}),this.researchButton.title="Uses the current note title or selection for web search and appends an LLM summary.",this.researchButton.onclick=async()=>{if(this.isProcessing||this.plugin.getIsBusy()){new x.Notice("Processing already in progress.");return}let c=this.app.workspace.getActiveFile();if(!c||!(c instanceof x.TFile)||c.extension!=="md"){this.log('Debug: "Research & Summarize" clicked, but no active Markdown file found.');return}let g=null,p=null;if(this.app.workspace.iterateAllLeaves(u=>{var f;u.view instanceof x.MarkdownView&&((f=u.view.file)==null?void 0:f.path)===c.path&&(g=u.view,p=u.view.editor)}),g&&p){this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log(`Starting: Research & Summarize Topic for ${c.name}...`),this.updateStatus("Researching topic...",0);try{await this.plugin.researchAndSummarizeCommand(p,g,this)}catch(u){let f=u instanceof Error?u.message:String(u);this.log(`Error during Research & Summarize: ${f}`),this.updateStatus("Error occurred",-1)}finally{this.isProcessing=!1,this.updateButtonStates()}}else this.log(`Debug: "Research & Summarize" clicked for active file "${c.name}", but its editor/view was not found.`)},this.generateTitleButton=n.createEl("button",{text:"Generate from title"}),this.generateTitleButton.title="Generates content for the current note based on its title, replacing existing content.",this.generateTitleButton.onclick=async()=>{if(this.isProcessing)return;let c=this.plugin.app.workspace.getActiveFile();if(!c||!(c instanceof x.TFile)||c.extension!=="md"){new x.Notice("No active Markdown file selected.");return}this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log("Starting: Generate Content from Title..."),this.updateStatus("Generating content...",0);try{await this.plugin.generateContentForTitleCommand(c,this)}finally{this.isProcessing=!1,this.updateButtonStates()}},this.batchGenerateTitleButton=n.createEl("button",{text:"Batch generate from titles"}),this.batchGenerateTitleButton.title="Generates content for all notes in a selected folder based on their titles.",this.batchGenerateTitleButton.onclick=async()=>{if(!this.isProcessing){this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log("Starting: Batch Generate Content from Titles..."),this.updateStatus("Starting batch generation...",0);try{await this.plugin.batchGenerateContentForTitlesCommand(this)}finally{this.isProcessing=!1,this.updateButtonStates()}}};let s=n.createDiv({cls:"notemd-translate-group"});this.translateButton=s.createEl("button",{text:"Translate",cls:"mod-cta"}),this.translateButton.title="Translates the selected text using the configured provider.",this.translateButton.onclick=async()=>{if(this.isProcessing){console.log("Translate button clicked but already processing. Ignoring.");return}let c=this.app.workspace.getActiveFile();if(c){console.log("Translate button clicked. Initializing processing state."),this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log("Starting: Translate File..."),this.updateStatus("Translating...",0);try{await this.plugin.translateFileCommand(c,this.currentAbortController.signal,this)}finally{console.log("Translate command finished. Resetting processing state."),this.isProcessing=!1,this.updateButtonStates()}}else new x.Notice("No active file to translate."),console.log("No active file to translate. Translate command not started.")},this.summarizeToMermaidButton=n.createEl("button",{text:"Summarise as Mermaid diagram"}),this.summarizeToMermaidButton.title="Summarises the current note content as a Mermaid mindmap diagram and saves it to a new file.",this.summarizeToMermaidButton.onclick=async()=>{if(this.isProcessing)return;let c=this.plugin.app.workspace.getActiveFile();if(!c||!(c instanceof x.TFile)||c.extension!=="md"){new x.Notice("No active Markdown file selected.");return}this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log("Starting: Summarise as Mermaid diagram..."),this.updateStatus("Summarizing...",0);try{await this.plugin.summarizeToMermaidCommand(c,this)}finally{this.isProcessing=!1,this.updateButtonStates()}},this.languageSelector=s.createEl("select");let a=this.languageSelector;a&&(this.plugin.settings.availableLanguages.forEach(c=>{a.add(new Option(c.name,c.code))}),a.value=this.plugin.settings.language,a.onchange=async c=>{this.plugin.settings.language=c.target.value,await this.plugin.saveSettings(),new x.Notice(`Language changed to ${this.plugin.settings.language}`)}),e.createEl("h4",{text:"Utilities"});let r=e.createDiv({cls:"notemd-button-group"});this.batchMermaidFixButton=r.createEl("button",{text:"Batch Mermaid fix"}),this.batchMermaidFixButton.title="Fixes Mermaid and LaTeX syntax in all Markdown files in a selected folder.",this.batchMermaidFixButton.onclick=async()=>{if(!this.isProcessing){this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log("Starting: Batch Mermaid Fix..."),this.updateStatus("Starting batch fix...",0);try{await this.plugin.batchMermaidFixCommand(this)}finally{this.isProcessing=!1,this.updateButtonStates()}}},this.checkDuplicatesButton=r.createEl("button",{text:"Check duplicates (current file)"}),this.checkDuplicatesButton.onclick=async()=>{let c=this.plugin.app.workspace.getActiveFile();if(!c||!(c instanceof x.TFile)||c.extension!=="md"&&c.extension!=="txt"){new x.Notice("No active '.md' or '.txt' file to check.");return}this.clearDisplay(),this.log(`Checking duplicates in ${c.name}...`),this.updateStatus(`Checking ${c.name}...`,50);try{let g=await this.plugin.app.vault.read(c),p=te(g),u=`Found ${p.size} potential duplicate terms. Check log below and console.`;this.log(u),new x.Notice(u),p.size>0&&(this.log(`Potential duplicates: ${Array.from(p).join(", ")}`),console.log(`Potential duplicates in ${c.name}:`,Array.from(p))),this.updateStatus("Duplicate check complete.",100)}catch(g){let p=g instanceof Error?g.message:String(g);new x.Notice(`Error checking duplicates: ${p}`),this.log(`Error: ${p}`),this.updateStatus("Error checking duplicates.",-1),console.error("Error checking duplicates (Sidebar):",g)}},this.testConnectionButton=r.createEl("button",{text:"Test LLM connection"}),this.testConnectionButton.onclick=async()=>{if(this.isProcessing){new x.Notice("Cannot test connection while processing.");return}this.clearDisplay(),await this.plugin.testLlmConnectionCommand(this)},this.checkRemoveDuplicatesButton=r.createEl("button",{text:"Check & remove duplicates"}),this.checkRemoveDuplicatesButton&&(this.checkRemoveDuplicatesButton.title="Checks Concept Note folder for duplicates and prompts for deletion.",this.checkRemoveDuplicatesButton.onclick=async()=>{if(!this.isProcessing){this.clearDisplay(),this.currentAbortController=new AbortController,this.isProcessing=!0,this.startTime=Date.now(),this.updateButtonStates(),this.log("Starting: Check & Remove Duplicate Concept Notes..."),this.updateStatus("Checking duplicates...",0);try{this.plugin&&await this.plugin.checkAndRemoveDuplicateConceptNotesCommand(this)}finally{this.isProcessing=!1,this.updateButtonStates()}}}),e.createEl("hr");let d=e.createDiv({cls:"notemd-progress-area"});this.statusEl=d.createEl("p",{text:"Ready",cls:"notemd-status-text"}),this.progressBarContainerEl=d.createEl("div",{cls:"notemd-progress-bar-container is-hidden"}),this.progressEl=this.progressBarContainerEl.createEl("div",{cls:"notemd-progress-bar-fill"}),this.timeRemainingEl=d.createEl("p",{cls:"notemd-time-remaining"}),this.cancelButton=d.createEl("button",{text:"Cancel processing",cls:"notemd-cancel-button"}),this.cancelButton.onclick=()=>this.requestCancel(),e.createEl("hr");let l=e.createDiv({cls:"notemd-log-header"});l.createEl("h5",{text:"Log output"});let m=l.createEl("button",{text:"Copy log",cls:"notemd-copy-log-button"});m.onclick=()=>{this.logContent.length>0?navigator.clipboard.writeText(this.logContent.join(`
`)).then(()=>new x.Notice("Log copied!"),()=>new x.Notice("Failed to copy log.")):new x.Notice("Log is empty.")},this.logEl=e.createEl("div",{cls:"notemd-log-output is-selectable"}),this.activeLeafChangeHandler=()=>this.updateResearchButtonState(),this.plugin.registerEvent(this.app.workspace.on("active-leaf-change",this.activeLeafChangeHandler)),this.updateButtonStates()}updateResearchButtonState(){if(!this.researchButton)return;let e=this.app.workspace.getActiveViewOfType(x.MarkdownView),t=this.isProcessing;this.researchButton.disabled=t,t?this.researchButton.addClass("is-disabled"):this.researchButton.removeClass("is-disabled")}async onClose(){this.activeLeafChangeHandler&&(this.app.workspace.off("active-leaf-change",this.activeLeafChangeHandler),this.activeLeafChangeHandler=null),this.statusEl=null,this.progressEl=null,this.progressBarContainerEl=null,this.timeRemainingEl=null,this.logEl=null,this.cancelButton=null,this.processCurrentButton=null,this.processFolderButton=null,this.researchButton=null,this.generateTitleButton=null,this.batchGenerateTitleButton=null,this.checkDuplicatesButton=null,this.testConnectionButton=null,this.checkRemoveDuplicatesButton=null,this.batchMermaidFixButton=null,this.summarizeToMermaidButton=null,this.translateButton=null,this.languageSelector=null}};var X=require("obsidian");async function Ie(o,i,e,t,n,s){let a=await o.vault.read(e);if(!a)return new X.Notice("File is empty."),null;let r=_("translate",i);if(!r)return new X.Notice("No provider configured for translation."),null;let d=z("translate",r,i),l=`Translate the following markdown document to ${t}. Preserve the original markdown formatting, including headers, lists, bold, italics, links, etc. Only output the translated document.`;try{let m=re(a,i),c=m.length,g=[];for(let k=0;k<c;k++){if(s!=null&&s.aborted)throw new Error("Translation cancelled by user.");let C=m[k],T=Math.floor(k/c*100);n.updateStatus(`Translating chunk ${k+1}/${c}...`,T),n.log(`Translating chunk ${k+1}/${c}...`);let E=await ce(r,l,C,i,n,d,s);g.push(E)}let p=g.join(`

`),u;if(i.useCustomTranslationSavePath&&i.translationSavePath){if(u=i.translationSavePath,!o.vault.getAbstractFileByPath(u))try{await o.vault.createFolder(u)}catch(C){console.error(`Error creating translation folder at ${u}:`,C),new X.Notice(`Failed to create translation folder: ${u}. Defaulting to original file's folder.`),u=e.parent?e.parent.path:"/"}}else u=e.parent?e.parent.path:"/";let f=i.useCustomTranslationSuffix?i.translationCustomSuffix:`_${t}`,h=`${e.basename}${f}.md`,y=u==="/"||u===""?h:`${u}/${h}`,S=o.vault.getAbstractFileByPath(y);return S?await o.vault.modify(S,p):await o.vault.create(y,p),new X.Notice(`Translated file saved to ${y}`),y}catch(m){throw m instanceof Error&&m.name==="AbortError"?(n.log("Translation cancelled by user."),n.updateStatus("Cancelled",-1),new Error("Translation cancelled by user.")):(console.error("Translation Error:",m),new X.Notice("Failed to translate file. See console for details."),m)}}var he=class extends v.Plugin{constructor(){super(...arguments);this.isBusy=!1;this.currentProcessingFileBasename={value:null}}getIsBusy(){return this.isBusy}setBusy(e){this.isBusy=e}async onload(){await this.loadSettings(),this.registerView(O,e=>new ne(e,this)),this.addCommand({id:"notemd-summarize-as-mermaid",name:"Summarise as Mermaid diagram",editorCallback:async(e,t)=>{let n=t.file;if(n){let s=this.getReporter();await this.summarizeToMermaidCommand(n,s)}}}),this.addRibbonIcon(oe,ie,()=>{this.activateView()}),this.statusBarItem=this.addStatusBarItem(),this.updateStatusBar("Ready"),this.addCommand({id:"process-with-notemd",name:"Process current file (add links)",checkCallback:e=>{let t=this.app.workspace.getActiveFile();return t&&(t.extension==="md"||t.extension==="txt")?(e||this.processWithNotemdCommand(),!0):!1}}),this.addCommand({id:"process-folder-with-notemd",name:"Process folder (add links)",callback:async()=>{await this.processFolderWithNotemdCommand()}}),this.addCommand({id:"check-for-duplicates",name:"Check for duplicates in current file",checkCallback:e=>{let t=this.app.workspace.getActiveFile();if(t&&(t.extension==="md"||t.extension==="txt")){if(!e){let s=this.app.workspace.getActiveFile();s&&(s.extension==="md"||s.extension==="txt")?(async()=>{try{let a=await this.app.vault.read(s),r=te(a),d=`Found ${r.size} potential duplicate terms. Check console.`;new v.Notice(d),r.size>0&&console.log(`Potential duplicates in ${s.name}:`,Array.from(r))}catch(a){let r="An unknown error occurred while checking duplicates.";a instanceof Error&&(r=a.message),new v.Notice(`Error checking duplicates: ${r}`),console.error("Error checking duplicates:",a)}})():e||new v.Notice("No active '.md' or '.txt' file to check.")}return!0}return!1}}),this.addCommand({id:"test-llm-connection",name:"Test LLM connection",checkCallback:e=>this.settings.providers.find(s=>s.name===this.settings.activeProvider)?(e||this.testLlmConnectionCommand(),!0):(e||new v.Notice("No active LLM provider configured. Please check Notemd settings."),!1)}),this.addCommand({id:"generate-content-from-title",name:"Generate content from note title",checkCallback:e=>{let t=this.app.workspace.getActiveFile();if(t&&t instanceof v.TFile&&t.extension==="md"){if(!e){let s=this.app.workspace.getActiveFile();s&&s instanceof v.TFile&&s.extension==="md"?this.generateContentForTitleCommand(s):new v.Notice("No active Markdown file selected or file changed.")}return!0}return e||new v.Notice("No active Markdown file selected."),!1}}),this.addCommand({id:"research-and-summarize-topic",name:"Research and summarize topic",checkCallback:e=>{if(this.app.workspace.getActiveViewOfType(v.MarkdownView)!==null){if(e)new v.Notice("No active Markdown editor found.");else{let s=this.app.workspace.getActiveViewOfType(v.MarkdownView);s&&this.researchAndSummarizeCommand(s.editor,s)}return!0}return e||new v.Notice("No active Markdown editor found."),!1}}),this.addCommand({id:"batch-generate-content-from-titles",name:"Batch generate content from titles",callback:async()=>{await this.batchGenerateContentForTitlesCommand()}}),this.addCommand({id:"check-and-remove-duplicate-concept-notes",name:"Check and remove duplicate concept notes",callback:async()=>{await this.checkAndRemoveDuplicateConceptNotesCommand()}}),this.addCommand({id:"batch-mermaid-fix",name:"Batch fix Mermaid syntax",callback:async()=>{await this.batchMermaidFixCommand()}}),this.addCommand({id:"translate-file",name:"Translate current file",checkCallback:e=>{let t=this.app.workspace.getActiveFile();return t?(e||this.translateFileCommand(t),!0):!1}}),this.addSettingTab(new me(this.app,this)),this.registerEvent(this.app.vault.on("rename",(e,t)=>{e instanceof v.TFile&&e.extension==="md"&&Ae(this.app,t,e.path)})),this.registerEvent(this.app.vault.on("delete",e=>{e instanceof v.TFile&&e.extension==="md"&&Le(this.app,e.path)}))}onunload(){}async loadSettings(){let e=await this.loadData()||{},t=e.providers||[],n=P.providers,s=[],a=new Map(t.map(c=>[c.name,c]));t.forEach(c=>{let g=n.find(p=>p.name===c.name);s.push({...g||{},...c})}),n.forEach(c=>{a.has(c.name)||s.push(c)}),this.settings=Object.assign({},P,e,{providers:s}),this.settings.providers.some(c=>c.name===this.settings.activeProvider)||(this.settings.activeProvider=P.activeProvider),this.settings.addLinksProvider=this.settings.providers.some(c=>c.name===this.settings.addLinksProvider)?this.settings.addLinksProvider:this.settings.activeProvider,this.settings.researchProvider=this.settings.providers.some(c=>c.name===this.settings.researchProvider)?this.settings.researchProvider:this.settings.activeProvider,this.settings.generateTitleProvider=this.settings.providers.some(c=>c.name===this.settings.generateTitleProvider)?this.settings.generateTitleProvider:this.settings.activeProvider,this.settings.translateProvider=this.settings.providers.some(c=>c.name===this.settings.translateProvider)?this.settings.translateProvider:this.settings.activeProvider;let r=P.availableLanguages,d=this.settings.availableLanguages||[],l=new Set(d.map(c=>c.code)),m=[...d];r.forEach(c=>{l.has(c.code)||m.push(c)}),this.settings.availableLanguages=m}async saveSettings(){await this.saveData(this.settings)}updateStatusBar(e){this.statusBarItem&&this.statusBarItem.setText(`Notemd: ${e}`)}async activateView(){let e=this.app.workspace.getLeavesOfType(O);if(e.length>0){this.app.workspace.revealLeaf(e[0]);return}let t=this.app.workspace.getRightLeaf(!1);t?(await t.setViewState({type:O,active:!0}),this.app.workspace.revealLeaf(t)):(console.error("Could not get right sidebar leaf."),new v.Notice("Could not open Notemd sidebar."))}getReporter(){var t;let e=(t=this.app.workspace.getLeavesOfType(O)[0])==null?void 0:t.view;if(e instanceof ne)return this.app.workspace.revealLeaf(e.leaf),e.clearDisplay(),e;{let n=new N(this.app);return n.open(),n}}async getFolderSelection(){let e=this.app.vault.getAllLoadedFiles().filter(t=>t instanceof v.TFolder).map(t=>t.path);return e.unshift("/"),new Promise(t=>{let n=new v.Modal(this.app);n.titleEl.setText("Select Folder");let s=n.contentEl.createEl("select");e.forEach(r=>s.createEl("option",{text:r==="/"?"(Vault Root)":r,value:r}));let a=n.contentEl.createDiv({cls:"modal-button-container"});a.createEl("button",{text:"Select",cls:"mod-cta"}).onclick=()=>{n.close(),t(s.value)},a.createEl("button",{text:"Cancel"}).onclick=()=>{n.close(),t(null)},n.open()})}log(e){console.log(`[Notemd] ${e}`)}getProviderAndModelForTask(e){let t=this.settings.activeProvider,n;if(this.settings.useMultiModelSettings)switch(e){case"addLinks":t=this.settings.addLinksProvider,n=this.settings.addLinksModel;break;case"research":t=this.settings.researchProvider,n=this.settings.researchModel;break;case"generateTitle":t=this.settings.generateTitleProvider,n=this.settings.generateTitleModel;break;case"translate":t=this.settings.translateProvider,n=this.settings.translateModel;break;case"summarizeToMermaid":t=this.settings.summarizeToMermaidProvider,n=this.settings.summarizeToMermaidModel;break}let s=this.settings.providers.find(a=>a.name===t)||this.settings.providers.find(a=>a.name===this.settings.activeProvider);if(!s)throw new Error("Could not find a valid LLM provider. Please check your settings.");return{provider:s,modelName:n||s.model}}getPromptForTask(e,t={}){let n=ue(this.settings,e,t);return this.settings.enableGlobalCustomPrompts&&(e==="addLinks"&&this.settings.useCustomPromptForAddLinks||e==="generateTitle"&&this.settings.useCustomPromptForGenerateTitle||e==="researchSummarize"&&this.settings.useCustomPromptForResearchSummarize||e==="summarizeToMermaid"&&this.settings.useCustomPromptForSummarizeToMermaid)?this.log(`Using custom prompt for task: ${e}`):this.settings.enableFocusedLearning&&this.settings.focusedLearningDomain?this.log(`Using focused learning domain for task: ${e}`):this.log(`Using default prompt for task: ${e}`),n}async processWithNotemdCommand(e){if(this.isBusy){new v.Notice("Notemd is busy.");return}this.isBusy=!0;let t=e||this.getReporter();t.clearDisplay();try{await this.loadSettings();let n=this.app.workspace.getActiveFile();if(!n||!(n instanceof v.TFile)||n.extension!=="md"&&n.extension!=="txt")throw new Error("No active '.md' or '.txt' file to process.");t.updateStatus(`Processing ${n.name}...`,0),this.updateStatusBar(`Processing: ${n.name}`),await Se(this.app,this.settings,n,t,this.currentProcessingFileBasename),this.updateStatusBar("Processing complete"),t.updateStatus("Processing complete!",100),new v.Notice("Notemd processing complete!"),t instanceof N&&setTimeout(()=>t.close(),2e3)}catch(n){this.updateStatusBar("Error occurred");let s="An unknown error occurred during processing.",a=String(n);n instanceof Error&&(s=n.message,a=n.stack||n.message),console.error("Notemd Processing Error:",a),s.includes("cancelled by user")||(new v.Notice(`Error during processing: ${s}. See console.`,1e4),new $(this.app,"Notemd Processing Error",a).open()),t.log(`Error: ${s}`),t.updateStatus("Error occurred",-1)}finally{this.isBusy=!1}}async processFolderWithNotemdCommand(e){if(this.isBusy){new v.Notice("Notemd is busy.");return}this.isBusy=!0;let t=e||this.getReporter();t.clearDisplay();try{await this.loadSettings();let n=await this.getFolderSelection();if(!n)throw t.log("Folder selection cancelled."),t.updateStatus("Cancelled",-1),new Error("Folder selection cancelled.");let s=this.app.vault.getAbstractFileByPath(n);if(!s||!(s instanceof v.TFolder))throw new Error(`Invalid folder selected: ${n}`);let a=this.app.vault.getFiles().filter(d=>(d.extension==="md"||d.extension==="txt")&&(d.path===n||d.path.startsWith(n==="/"?"":n+"/")));if(a.length===0){new v.Notice(`No '.md' or '.txt' files found in selected folder: ${n}`),t.log(`No eligible files found in "${n}".`),t.updateStatus("No files found",100),t instanceof N&&setTimeout(()=>t.close(),2e3);return}this.updateStatusBar(`Batch processing ${a.length} files...`),t.log(`Starting batch processing for ${a.length} files in "${n}"...`);let r=[];for(let d=0;d<a.length;d++){let l=a[d];if(t.cancelled){new v.Notice("Batch processing cancelled."),this.updateStatusBar("Cancelled"),t.updateStatus("Cancelled",-1);break}let m=Math.floor(d/a.length*100);t.updateStatus(`Processing ${d+1}/${a.length}: ${l.name}`,m);try{await Se(this.app,this.settings,l,t,this.currentProcessingFileBasename)}catch(c){let g=c instanceof Error?c.message:String(c),p=c instanceof Error?c.stack:void 0,u=`Error processing ${l.name}: ${g}`;console.error(u,c),t.log(`\u274C ${u}`),r.push({file:l.name,message:g});let h=`[${new Date().toISOString()}] Error processing ${l.path}:
Message: ${g}
Stack Trace:
${p||c}

`;try{await this.app.vault.adapter.append("error_processing_filename.log",h)}catch(y){console.error("Failed to write to error log:",y),t.log("\u26A0\uFE0F Failed to write error details to log file.")}if(g.includes("cancelled by user"))break}}if(!t.cancelled)if(r.length>0){let d=`Batch processing finished with ${r.length} error(s). Check 'error_processing_filename.log'.`;t.log(`\u26A0\uFE0F ${d}`),t.updateStatus(d,-1),this.updateStatusBar("Batch complete with errors"),new v.Notice(d,1e4)}else t.updateStatus("Batch processing complete!",100),this.updateStatusBar("Batch complete"),new v.Notice(`Successfully processed ${a.length} files.`,5e3),t instanceof N&&setTimeout(()=>t.close(),2e3)}catch(n){this.updateStatusBar("Error occurred");let s="An unknown error occurred during batch processing.",a=String(n);n instanceof Error&&(s=n.message,a=n.stack||n.message),console.error("Notemd Batch Processing Error:",a),s.includes("cancelled")||(new v.Notice(`Error during batch processing: ${s}. See console.`,1e4),new $(this.app,"Notemd Batch Processing Error",a).open()),t.log(`Batch Error: ${s}`),t.updateStatus("Error occurred during batch processing",-1)}finally{this.isBusy=!1}}async testLlmConnectionCommand(e){if(this.isBusy){new v.Notice("Cannot test connection while processing.");return}this.isBusy=!0;let t=e||this.getReporter();e||t.clearDisplay();try{await this.loadSettings();let n=this.settings.providers.find(r=>r.name===this.settings.activeProvider);if(!n)throw new Error("No active provider configured");t.log(`Testing connection to ${n.name}...`),t.updateStatus(`Testing ${n.name}...`,50);let s=new v.Notice(`Testing connection to ${n.name}...`,0),a=await le(n);s.hide(),a.success?(t.log(`\u2705 Success: ${a.message}`),new v.Notice(`\u2705 Success: ${a.message}`,5e3),t.updateStatus("Connection successful!",100)):(t.log(`\u274C Failed: ${a.message}. Check console.`),new v.Notice(`\u274C Failed: ${a.message}. Check console.`,1e4),t.updateStatus("Connection failed.",-1))}catch(n){let s="An unknown error occurred during connection test.",a=String(n);n instanceof Error&&(s=n.message,a=n.stack||n.message),t.log(`\u274C ${s}`),new v.Notice(s,1e4),console.error("LLM Connection Test Error:",a),t.updateStatus("Connection test error.",-1),new $(this.app,"LLM Connection Test Error",a).open()}finally{this.isBusy=!1}}async generateContentForTitleCommand(e,t){if(this.isBusy){new v.Notice("Notemd is busy.");return}this.isBusy=!0;let n=t||this.getReporter();t||n.clearDisplay(),this.updateStatusBar(`Generating: ${e.name}`);try{await this.loadSettings(),await ve(this.app,this.settings,e,n),this.updateStatusBar("Generation complete"),n.updateStatus("Content generation complete!",100),new v.Notice(`Content generated successfully for ${e.name}!`),n instanceof N&&setTimeout(()=>n.close(),2e3)}catch(s){this.updateStatusBar("Error during generation");let a="An unknown error occurred during content generation.",r=String(s);s instanceof Error&&(a=s.message,r=s.stack||s.message),a.includes("cancelled by user")||(console.error(`Error generating content for ${e.name}:`,r),new v.Notice(`Error generating content: ${a}. See console.`,1e4),new $(this.app,"Content Generation Error",r).open()),n.log(`Error generating content for ${e.name}: ${a}`),n.updateStatus("Error occurred",-1)}finally{this.isBusy=!1}}async researchAndSummarizeCommand(e,t,n){if(this.isBusy){new v.Notice("Notemd is busy.");return}this.isBusy=!0;let s=n||this.getReporter();n||s.clearDisplay();let a=t.file;if(!a){new v.Notice("No active file."),this.isBusy=!1;return}let r=e.getSelection(),d=r?r.trim():a.basename;if(!d){new v.Notice("No topic found (select text or use note title)."),this.isBusy=!1;return}this.updateStatusBar(`Researching: ${d}`),s.log(`Starting research for topic: "${d}"`);try{await this.loadSettings(),await xe(this.app,this.settings,e,t,s),s.cancelled?this.updateStatusBar("Research cancelled"):this.updateStatusBar("Research complete")}catch(l){this.updateStatusBar("Error during research");let m="An unknown error occurred during research.",c=String(l);l instanceof Error&&(m=l.message,c=l.stack||l.message),m.includes("cancelled by user")||(console.error(`Error researching "${d}":`,c),new v.Notice(`Error during research: ${m}. See console.`,1e4),new $(this.app,"Research Error",c).open()),s.cancelled||(s.log(`Error: ${m}`),s.updateStatus("Error occurred",-1))}finally{this.isBusy=!1}}async batchGenerateContentForTitlesCommand(e){if(this.isBusy){new v.Notice("Notemd is busy.");return}this.isBusy=!0;let t=e||this.getReporter();e||t.clearDisplay();try{await this.loadSettings();let n=await this.getFolderSelection();if(!n)throw t.log("Folder selection cancelled."),t.updateStatus("Cancelled",-1),new Error("Folder selection cancelled.");this.updateStatusBar("Batch generating..."),t.log(`Starting batch generation for folder: "${n}"...`);let{errors:s}=await De(this.app,this.settings,n,t);if(t.cancelled)this.updateStatusBar("Batch generation cancelled"),new v.Notice("Batch generation cancelled.");else if(s.length>0){let a=`Batch generation finished with ${s.length} error(s). Check 'error_processing_filename.log'.`;t.log(`\u26A0\uFE0F ${a}`),t.updateStatus(a,-1),this.updateStatusBar("Batch generation complete with errors"),new v.Notice(a,1e4)}else{let a=this.app.vault.getMarkdownFiles().filter(r=>r.path.startsWith(n==="/"?"":n+"/")).length;t.updateStatus("Batch generation complete!",100),this.updateStatusBar("Batch generation complete"),new v.Notice(`Successfully generated content for eligible files in "${n}".`,5e3),t instanceof N&&setTimeout(()=>t.close(),2e3)}}catch(n){this.updateStatusBar("Error during batch generation");let s="An unknown error occurred during batch generation.",a=String(n);n instanceof Error&&(s=n.message,a=n.stack||n.message),s.includes("cancelled")||(console.error("Notemd Batch Generation Error:",a),new v.Notice(`Error during batch generation: ${s}. See console.`,1e4),new $(this.app,"Notemd Batch Generation Error",a).open()),t.log(`Batch Error: ${s}`),t.updateStatus("Error occurred during batch generation",-1)}finally{this.isBusy=!1}}async checkAndRemoveDuplicateConceptNotesCommand(e){if(this.isBusy){new v.Notice("Notemd is busy.");return}this.isBusy=!0;let t=e||this.getReporter();e||t.clearDisplay(),this.updateStatusBar("Checking duplicates..."),t.log("Starting: Check & Remove Duplicate Concept Notes..."),t.updateStatus("Checking duplicates...",0);try{await this.loadSettings(),await Be(this.app,this.settings,t),this.updateStatusBar("Duplicate check complete.")}catch(n){this.updateStatusBar("Error during duplicate check");let s="An unknown error occurred during duplicate check.",a=String(n);n instanceof Error&&(s=n.message,a=n.stack||n.message),console.error("Error checking/removing duplicate concept notes:",a),new v.Notice(`Error checking/removing duplicates: ${s}. See console.`,1e4),t.log(`Error: ${s}`),t.updateStatus("Error occurred",-1),new $(this.app,"Duplicate Check/Remove Error",a).open()}finally{this.isBusy=!1}}async batchMermaidFixCommand(e){if(this.isBusy){new v.Notice("Notemd is busy.");return}this.isBusy=!0;let t=e||this.getReporter();e||t.clearDisplay();try{await this.loadSettings();let n=await this.getFolderSelection();if(!n)throw t.log("Folder selection cancelled."),t.updateStatus("Cancelled",-1),new Error("Folder selection cancelled.");this.updateStatusBar("Batch fixing Mermaid syntax..."),t.log(`Starting batch Mermaid fix for folder: "${n}"...`);let{errors:s,modifiedCount:a}=await Fe(this.app,n,t);if(!t.cancelled)if(s.length>0){let r=`Batch Mermaid fix finished with ${s.length} error(s). Modified ${a} files. Check console/log.`;t.log(`\u26A0\uFE0F ${r}`),t.updateStatus(r,-1),this.updateStatusBar("Batch fix complete with errors"),new v.Notice(r,1e4)}else{let r=`Batch Mermaid fix complete! Modified ${a} files.`;t.updateStatus(r,100),this.updateStatusBar("Batch fix complete"),new v.Notice(r,5e3),t instanceof N&&setTimeout(()=>t.close(),2e3)}}catch(n){this.updateStatusBar("Error during batch fix");let s="An unknown error occurred during batch Mermaid fix.",a=String(n);n instanceof Error&&(s=n.message,a=n.stack||n.message),s.includes("cancelled")||(console.error("Notemd Batch Mermaid Fix Error:",a),new v.Notice(`Error during batch fix: ${s}. See console.`,1e4),new $(this.app,"Notemd Batch Mermaid Fix Error",a).open()),t.log(`Batch Fix Error: ${s}`),t.updateStatus("Error occurred during batch fix",-1)}finally{this.isBusy=!1}}async translateFileCommand(e,t,n){if(this.isBusy){new v.Notice("Notemd is busy.");return}let s=n||this.getReporter();this.isBusy=!0,this.updateStatusBar("Translating...");try{await this.loadSettings();let a=await Ie(this.app,this.settings,e,this.settings.language,s,t);if(this.updateStatusBar("Translation complete"),s.log("Translation complete."),s.updateStatus("Translation complete",100),a){let r=this.app.workspace.getLeaf("split","vertical"),d=this.app.vault.getAbstractFileByPath(a);d instanceof v.TFile&&r.openFile(d)}}catch(a){this.updateStatusBar("Translation failed");let r="An unknown error occurred during translation.",d=String(a);a instanceof Error&&(r=a.message,d=a.stack||a.message),r.includes("cancelled by user")||(console.error("Translation Error:",d),new v.Notice(`Failed to translate file: ${r}. See console for details.`,1e4),new $(this.app,"Translation Error",d).open()),s.log(`Error: ${r}`),s.updateStatus("Error occurred",-1)}finally{this.isBusy=!1}}async summarizeToMermaidCommand(e,t){var n;if(this.isBusy){new v.Notice("Another process is running. Please wait.");return}this.isBusy=!0,t.clearDisplay(),t.log(`Starting Mermaid summarization for ${e.name}...`),t.updateStatus(`Summarizing ${e.name}...`,5);try{let s=await this.app.vault.read(e);if(!s.trim())throw new Error("File is empty. Cannot summarize.");let{provider:a,modelName:r}=this.getProviderAndModelForTask("summarizeToMermaid");t.log(`Using provider: ${a.name}, Model: ${r}`);let d=this.getPromptForTask("summarizeToMermaid");if(this.settings.translateSummarizeToMermaidOutput){let c=((n=this.settings.availableLanguages.find(g=>g.code===this.settings.language))==null?void 0:n.name)||this.settings.language;d+=`

IMPORTANT: The entire Mermaid diagram, including all node text, MUST be translated into ${c}.`,t.log(`Translation to ${c} requested for Mermaid output.`)}t.updateStatus("Calling LLM for summarization...",20);let l=await ce(a,d,s,this.settings,t,r);t.updateStatus("LLM call complete. Processing response...",90);let m=await Ne(this.app,this.settings,e,l,t);if(t.updateStatus("Mermaid diagram saved successfully!",100),t.log(`Mermaid diagram saved to: ${m}`),new v.Notice("Mermaid diagram summarization complete!"),m){let c=this.app.workspace.getLeaf("split","vertical"),g=this.app.vault.getAbstractFileByPath(m);g instanceof v.TFile&&c.openFile(g)}}catch(s){let a=s instanceof Error?s.message:String(s);t.log(`Error during Mermaid summarization: ${a}`),t.updateStatus("Error during summarization.",-1),new v.Notice(`Summarization Error: ${a}`),console.error("Summarization Error:",s)}finally{t.log("Summarization process finished."),this.isBusy=!1}}};

/* nosourcemap */